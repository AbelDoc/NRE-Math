<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Math: NRE::Math::Vector2D&lt; T &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Math</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_math_1_1_vector2_d-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Math::Vector2D&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A cartesian 2D vector.  
 <a href="class_n_r_e_1_1_math_1_1_vector2_d.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___vector2_d_8hpp_source.php">NRE_Vector2D.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Math::Vector2D&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_math_1_1_vector2_d.png" usemap="#NRE::Math::Vector2D_3C_20T_20_3E_map" alt=""/>
  <map id="NRE::Math::Vector2D_3C_20T_20_3E_map" name="NRE::Math::Vector2D&lt; T &gt;_map">
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a08df7e86401cbf476042bd05ff4f76bd"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">Vector2D</a> ()=default</td></tr>
<tr class="separator:a08df7e86401cbf476042bd05ff4f76bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9352b1c9885642ba4440eabb31ee008"><td class="memTemplParams" colspan="2">template&lt;class K , class L , typename  = UseIfArithmetic&lt;K, L&gt;&gt; </td></tr>
<tr class="memitem:aa9352b1c9885642ba4440eabb31ee008"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aa9352b1c9885642ba4440eabb31ee008">Vector2D</a> (K nX, L nY)</td></tr>
<tr class="separator:aa9352b1c9885642ba4440eabb31ee008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bbd03092f4ae17cb30353903efd7cab"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:a1bbd03092f4ae17cb30353903efd7cab"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1bbd03092f4ae17cb30353903efd7cab">Vector2D</a> (K <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a89a59b504112afa558f7af55c6b27e6f">value</a>)</td></tr>
<tr class="separator:a1bbd03092f4ae17cb30353903efd7cab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76a49a22247d120896577a347151cbf9"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a76a49a22247d120896577a347151cbf9">Vector2D</a> (std::initializer_list&lt; T &gt; list)</td></tr>
<tr class="separator:a76a49a22247d120896577a347151cbf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb970fef721b84737d2ebe69a5bc2f79"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#adb970fef721b84737d2ebe69a5bc2f79">Vector2D</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> const &amp;u)=default</td></tr>
<tr class="separator:adb970fef721b84737d2ebe69a5bc2f79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a042fcf289b9ec0a2f77856e1fbffc6b0"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a042fcf289b9ec0a2f77856e1fbffc6b0">Vector2D</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&amp;u)=default</td></tr>
<tr class="separator:a042fcf289b9ec0a2f77856e1fbffc6b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8db83018bc5f06918c04d196e6016490"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a8db83018bc5f06918c04d196e6016490"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a8db83018bc5f06918c04d196e6016490">Vector2D</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u)</td></tr>
<tr class="separator:a8db83018bc5f06918c04d196e6016490"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed768f1f65d51071bc1384e6e06cea52"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:aed768f1f65d51071bc1384e6e06cea52"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aed768f1f65d51071bc1384e6e06cea52">Vector2D</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D</a>&lt; K &gt; const &amp;u)</td></tr>
<tr class="separator:aed768f1f65d51071bc1384e6e06cea52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ce1d1b43c52ad8c25734e3111ae23c9"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a8ce1d1b43c52ad8c25734e3111ae23c9"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a8ce1d1b43c52ad8c25734e3111ae23c9">Vector2D</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector4_d.php">Vector4D</a>&lt; K &gt; const &amp;u)</td></tr>
<tr class="separator:a8ce1d1b43c52ad8c25734e3111ae23c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb663aece6c51298c9da392e8d338474"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aeb663aece6c51298c9da392e8d338474">~Vector2D</a> ()=default</td></tr>
<tr class="separator:aeb663aece6c51298c9da392e8d338474"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a2394b397491fcd9493a1108f30109c"><td class="memItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a3a2394b397491fcd9493a1108f30109c">getX</a> () const </td></tr>
<tr class="separator:a3a2394b397491fcd9493a1108f30109c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acab4df35acef9a21408882db7b0dea7a"><td class="memItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acab4df35acef9a21408882db7b0dea7a">getY</a> () const </td></tr>
<tr class="separator:acab4df35acef9a21408882db7b0dea7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a461b9839c89b36b8b1d3339dca283f7e"><td class="memItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a461b9839c89b36b8b1d3339dca283f7e">getW</a> () const </td></tr>
<tr class="separator:a461b9839c89b36b8b1d3339dca283f7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43e9ed15954cf730cf3154ffec09bb61"><td class="memItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a43e9ed15954cf730cf3154ffec09bb61">getH</a> () const </td></tr>
<tr class="separator:a43e9ed15954cf730cf3154ffec09bb61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace6ab9e4c0fd771160bf628f376b1db2"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:ace6ab9e4c0fd771160bf628f376b1db2"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a> (K nX)</td></tr>
<tr class="separator:ace6ab9e4c0fd771160bf628f376b1db2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a894ce62ab59938f6fea66277cd0f589a"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:a894ce62ab59938f6fea66277cd0f589a"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a> (K nY)</td></tr>
<tr class="separator:a894ce62ab59938f6fea66277cd0f589a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbb877be71ee64451f25590bf0291870"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:acbb877be71ee64451f25590bf0291870"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acbb877be71ee64451f25590bf0291870">setW</a> (K w)</td></tr>
<tr class="separator:acbb877be71ee64451f25590bf0291870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13dd252d891b09a377bf8803c35f4cb1"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:a13dd252d891b09a377bf8803c35f4cb1"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a13dd252d891b09a377bf8803c35f4cb1">setH</a> (K h)</td></tr>
<tr class="separator:a13dd252d891b09a377bf8803c35f4cb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acae2dba8997626d0f54407d1c7bc79f2"><td class="memTemplParams" colspan="2">template&lt;class K , class L , typename  = UseIfArithmetic&lt;K, L&gt;&gt; </td></tr>
<tr class="memitem:acae2dba8997626d0f54407d1c7bc79f2"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acae2dba8997626d0f54407d1c7bc79f2">setCoord</a> (K nX, L nY)</td></tr>
<tr class="separator:acae2dba8997626d0f54407d1c7bc79f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fbd52013cb716f9f3db5b705c746220"><td class="memTemplParams" colspan="2">template&lt;class K , class L , typename  = UseIfArithmetic&lt;K, L&gt;&gt; </td></tr>
<tr class="memitem:a8fbd52013cb716f9f3db5b705c746220"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a8fbd52013cb716f9f3db5b705c746220">setSize</a> (K w, L h)</td></tr>
<tr class="separator:a8fbd52013cb716f9f3db5b705c746220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80e71b0c2736cde5dc3695f2c320609f"><td class="memItemLeft" align="right" valign="top">long double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a80e71b0c2736cde5dc3695f2c320609f">norm</a> () const </td></tr>
<tr class="separator:a80e71b0c2736cde5dc3695f2c320609f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a2081d8cdac089c8f069c66d11bb212"><td class="memItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a2a2081d8cdac089c8f069c66d11bb212">normSquared</a> () const </td></tr>
<tr class="separator:a2a2081d8cdac089c8f069c66d11bb212"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a56b45efe2942ad1dc694007e9d2946"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a9a56b45efe2942ad1dc694007e9d2946"><td class="memTemplItemLeft" align="right" valign="top">long double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a9a56b45efe2942ad1dc694007e9d2946">distance</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;v) const </td></tr>
<tr class="separator:a9a56b45efe2942ad1dc694007e9d2946"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ac6e10b0f77196c11a339b035e01eb0"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a7ac6e10b0f77196c11a339b035e01eb0"><td class="memTemplItemLeft" align="right" valign="top">constexpr std::common_type_t&lt; T, K &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a7ac6e10b0f77196c11a339b035e01eb0">distanceSquared</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;v) const </td></tr>
<tr class="separator:a7ac6e10b0f77196c11a339b035e01eb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21b03c6f25466279eaed82addf1b9e76"><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a21b03c6f25466279eaed82addf1b9e76">normalize</a> ()</td></tr>
<tr class="separator:a21b03c6f25466279eaed82addf1b9e76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a916ef2c335329680e35d9012a29b1af5"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:a916ef2c335329680e35d9012a29b1af5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a916ef2c335329680e35d9012a29b1af5">limit</a> (K max)</td></tr>
<tr class="separator:a916ef2c335329680e35d9012a29b1af5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af79ae133431dc31acc7ae1cb17dba7a6"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:af79ae133431dc31acc7ae1cb17dba7a6"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af79ae133431dc31acc7ae1cb17dba7a6">pow</a> (K p)</td></tr>
<tr class="separator:af79ae133431dc31acc7ae1cb17dba7a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ca861dd2ea247f94885776b71321a5a"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a1ca861dd2ea247f94885776b71321a5a"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1ca861dd2ea247f94885776b71321a5a">pow</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;p)</td></tr>
<tr class="separator:a1ca861dd2ea247f94885776b71321a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89a59b504112afa558f7af55c6b27e6f"><td class="memItemLeft" align="right" valign="top">constexpr const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a89a59b504112afa558f7af55c6b27e6f">value</a> () const </td></tr>
<tr class="separator:a89a59b504112afa558f7af55c6b27e6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91b3cdd355ebc5dda8e1107cb8eeae53"><td class="memItemLeft" align="right" valign="top">constexpr T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a91b3cdd355ebc5dda8e1107cb8eeae53">operator[]</a> (std::size_t index)</td></tr>
<tr class="separator:a91b3cdd355ebc5dda8e1107cb8eeae53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8393f862389acf1a8692b90e2fe7b8db"><td class="memItemLeft" align="right" valign="top">constexpr T const &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a8393f862389acf1a8692b90e2fe7b8db">operator[]</a> (std::size_t index) const </td></tr>
<tr class="separator:a8393f862389acf1a8692b90e2fe7b8db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38351021bd55581104833d541cf5b23e"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a38351021bd55581104833d541cf5b23e">operator=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> const &amp;u)=default</td></tr>
<tr class="separator:a38351021bd55581104833d541cf5b23e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabed27a6c2be057c26fd467612431215"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aabed27a6c2be057c26fd467612431215">operator=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&amp;u)=default</td></tr>
<tr class="separator:aabed27a6c2be057c26fd467612431215"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec0df726aee79886ecca5a05cb60a7a4"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:aec0df726aee79886ecca5a05cb60a7a4"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aec0df726aee79886ecca5a05cb60a7a4">operator=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u)</td></tr>
<tr class="separator:aec0df726aee79886ecca5a05cb60a7a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fd0026ca27ca633e5cb8bf34665087b"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a9fd0026ca27ca633e5cb8bf34665087b"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a9fd0026ca27ca633e5cb8bf34665087b">operator=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; &amp;&amp;u)</td></tr>
<tr class="separator:a9fd0026ca27ca633e5cb8bf34665087b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45e82496cbbb4b3fe17371e5ca2fb741"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:a45e82496cbbb4b3fe17371e5ca2fb741"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a45e82496cbbb4b3fe17371e5ca2fb741">operator+=</a> (K k)</td></tr>
<tr class="separator:a45e82496cbbb4b3fe17371e5ca2fb741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec4829fe87f20ac64fc10b16a62acc9b"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:aec4829fe87f20ac64fc10b16a62acc9b"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aec4829fe87f20ac64fc10b16a62acc9b">operator+=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u)</td></tr>
<tr class="separator:aec4829fe87f20ac64fc10b16a62acc9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4b63d2951633833f5d64ca0aff504b8"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:ac4b63d2951633833f5d64ca0aff504b8"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac4b63d2951633833f5d64ca0aff504b8">operator-=</a> (K k)</td></tr>
<tr class="separator:ac4b63d2951633833f5d64ca0aff504b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac00b78f660f368b7ec40464bd299c9c4"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:ac00b78f660f368b7ec40464bd299c9c4"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac00b78f660f368b7ec40464bd299c9c4">operator-=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u)</td></tr>
<tr class="separator:ac00b78f660f368b7ec40464bd299c9c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac94a500ffe2d3fc700a5d7c7b09d52a2"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:ac94a500ffe2d3fc700a5d7c7b09d52a2"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac94a500ffe2d3fc700a5d7c7b09d52a2">operator*=</a> (K k)</td></tr>
<tr class="separator:ac94a500ffe2d3fc700a5d7c7b09d52a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c2b1751bec762161a05ecc7635aebd3"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a9c2b1751bec762161a05ecc7635aebd3"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a9c2b1751bec762161a05ecc7635aebd3">operator*=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u)</td></tr>
<tr class="separator:a9c2b1751bec762161a05ecc7635aebd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d649c08e564985fe3b384b091c2939a"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:a1d649c08e564985fe3b384b091c2939a"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1d649c08e564985fe3b384b091c2939a">operator/=</a> (K k)</td></tr>
<tr class="separator:a1d649c08e564985fe3b384b091c2939a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09a805f039ef168028d8c87c9bdf4603"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a09a805f039ef168028d8c87c9bdf4603"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a09a805f039ef168028d8c87c9bdf4603">operator/=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u)</td></tr>
<tr class="separator:a09a805f039ef168028d8c87c9bdf4603"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41153538045f45a46a9eb09e5131ec27"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a41153538045f45a46a9eb09e5131ec27"><td class="memTemplItemLeft" align="right" valign="top">constexpr std::common_type_t&lt; T, K &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a41153538045f45a46a9eb09e5131ec27">operator|=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:a41153538045f45a46a9eb09e5131ec27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3d182b98e3057905baec9cd214fe59a"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:af3d182b98e3057905baec9cd214fe59a"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; std::common_type_t&lt; T, K &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af3d182b98e3057905baec9cd214fe59a">operator+</a> (K k) const </td></tr>
<tr class="separator:af3d182b98e3057905baec9cd214fe59a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12812de610203faa97d948cb81c64fb0"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a12812de610203faa97d948cb81c64fb0"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; std::common_type_t&lt; T, K &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a12812de610203faa97d948cb81c64fb0">operator+</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:a12812de610203faa97d948cb81c64fb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc3c0fa6b2c48e043dc3957538130fe7"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:abc3c0fa6b2c48e043dc3957538130fe7"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; std::common_type_t&lt; T, K &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#abc3c0fa6b2c48e043dc3957538130fe7">operator-</a> (K k) const </td></tr>
<tr class="separator:abc3c0fa6b2c48e043dc3957538130fe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a247fa0fe8e74001116816fbe16c0e989"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a247fa0fe8e74001116816fbe16c0e989"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; std::common_type_t&lt; T, K &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a247fa0fe8e74001116816fbe16c0e989">operator-</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:a247fa0fe8e74001116816fbe16c0e989"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a218bee25eb6030898bef54cc3bf6ba81"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a218bee25eb6030898bef54cc3bf6ba81">operator-</a> () const </td></tr>
<tr class="separator:a218bee25eb6030898bef54cc3bf6ba81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51413595a6a7d31dd5c65e894040a0c6"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:a51413595a6a7d31dd5c65e894040a0c6"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; std::common_type_t&lt; T, K &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a51413595a6a7d31dd5c65e894040a0c6">operator*</a> (K k) const </td></tr>
<tr class="separator:a51413595a6a7d31dd5c65e894040a0c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3380937115261c2569aba8f84fee517"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:ab3380937115261c2569aba8f84fee517"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; std::common_type_t&lt; T, K &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ab3380937115261c2569aba8f84fee517">operator*</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:ab3380937115261c2569aba8f84fee517"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbb2b702f3350747afc8cf6d6d22ece3"><td class="memTemplParams" colspan="2">template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </td></tr>
<tr class="memitem:abbb2b702f3350747afc8cf6d6d22ece3"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; std::common_type_t&lt; T, K &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#abbb2b702f3350747afc8cf6d6d22ece3">operator/</a> (K k) const </td></tr>
<tr class="separator:abbb2b702f3350747afc8cf6d6d22ece3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae865ff78306f8529a05169d1f1a7e643"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:ae865ff78306f8529a05169d1f1a7e643"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; std::common_type_t&lt; T, K &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ae865ff78306f8529a05169d1f1a7e643">operator/</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:ae865ff78306f8529a05169d1f1a7e643"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8967384f96c5caa83f7a23417bbb515"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:ae8967384f96c5caa83f7a23417bbb515"><td class="memTemplItemLeft" align="right" valign="top">constexpr std::common_type_t&lt; T, K &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ae8967384f96c5caa83f7a23417bbb515">operator|</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:ae8967384f96c5caa83f7a23417bbb515"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd4672ebad8a9c5cc3cad77896ec0c37"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:acd4672ebad8a9c5cc3cad77896ec0c37"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acd4672ebad8a9c5cc3cad77896ec0c37">operator==</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:acd4672ebad8a9c5cc3cad77896ec0c37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98fdc3fb492e71db29d223061bb72974"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a98fdc3fb492e71db29d223061bb72974"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a98fdc3fb492e71db29d223061bb72974">operator!=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:a98fdc3fb492e71db29d223061bb72974"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8341b231e33641c3dc46b86b3c867e6"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:af8341b231e33641c3dc46b86b3c867e6"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af8341b231e33641c3dc46b86b3c867e6">operator&lt;</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:af8341b231e33641c3dc46b86b3c867e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcc4e15c47bc73e4563f8a5f500a672c"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:adcc4e15c47bc73e4563f8a5f500a672c"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#adcc4e15c47bc73e4563f8a5f500a672c">operator&gt;</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:adcc4e15c47bc73e4563f8a5f500a672c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a903ec0e2b2d155374bd0b1b4628d9fe4"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:a903ec0e2b2d155374bd0b1b4628d9fe4"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a903ec0e2b2d155374bd0b1b4628d9fe4">operator&lt;=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:a903ec0e2b2d155374bd0b1b4628d9fe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5fd1cc3d03861b731cab5f40e9d2265"><td class="memTemplParams" colspan="2">template&lt;class K &gt; </td></tr>
<tr class="memitem:af5fd1cc3d03861b731cab5f40e9d2265"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af5fd1cc3d03861b731cab5f40e9d2265">operator&gt;=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;u) const </td></tr>
<tr class="separator:af5fd1cc3d03861b731cab5f40e9d2265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7fe6559e4da3d52f42b40d6d59e800a"><td class="memItemLeft" align="right" valign="top">Utility::String&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ad7fe6559e4da3d52f42b40d6d59e800a">toString</a> () const </td></tr>
<tr class="separator:ad7fe6559e4da3d52f42b40d6d59e800a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br />
class NRE::Math::Vector2D&lt; T &gt;</h3>

<p>A cartesian 2D vector. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a08df7e86401cbf476042bd05ff4f76bd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Construct the null vector </p>

</div>
</div>
<a class="anchor" id="aa9352b1c9885642ba4440eabb31ee008"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , class L , typename  = UseIfArithmetic&lt;K, L&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>nX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">L&#160;</td>
          <td class="paramname"><em>nY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Construct a vector with passed values </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nX</td><td>new x value </td></tr>
    <tr><td class="paramname">nY</td><td>new y value </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1bbd03092f4ae17cb30353903efd7cab"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Construct a vector with unique values </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>the new x and y values </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a76a49a22247d120896577a347151cbf9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; T &gt;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Construct a vector from an initializer list </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the construction list </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adb970fef721b84737d2ebe69a5bc2f79"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Copy u into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the object to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a042fcf289b9ec0a2f77856e1fbffc6b0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Move u into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the object to move </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8db83018bc5f06918c04d196e6016490"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert a K-type vector into a T-type vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the K-type vector to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aed768f1f65d51071bc1384e6e06cea52"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert a K-type 3D vector into a T-type 2D vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the K-type 3D vector to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8ce1d1b43c52ad8c25734e3111ae23c9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector4_d.php">Vector4D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert a K-type 4D vector into a T-type 2D vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the K-type 4D vector to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aeb663aece6c51298c9da392e8d338474"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::~<a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php" title="A cartesian 2D vector. ">Vector2D</a> Deconstructor </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a9a56b45efe2942ad1dc694007e9d2946"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">long double <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::distance </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the distance to another vector </dd></dl>

</div>
</div>
<a class="anchor" id="a7ac6e10b0f77196c11a339b035e01eb0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::common_type_t&lt;T, K&gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::distanceSquared </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the squared distance to another vector </dd></dl>

</div>
</div>
<a class="anchor" id="a43e9ed15954cf730cf3154ffec09bb61"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::getH </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the y value </dd></dl>

</div>
</div>
<a class="anchor" id="a461b9839c89b36b8b1d3339dca283f7e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::getW </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the x value </dd></dl>

</div>
</div>
<a class="anchor" id="a3a2394b397491fcd9493a1108f30109c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::getX </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the x value </dd></dl>

</div>
</div>
<a class="anchor" id="acab4df35acef9a21408882db7b0dea7a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::getY </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the x value </dd></dl>

</div>
</div>
<a class="anchor" id="a916ef2c335329680e35d9012a29b1af5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::limit </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>max</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Limit the vector value to the given max, if to high then normalize it </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">max</td><td>the maximum value </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a80e71b0c2736cde5dc3695f2c320609f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">long double <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::norm </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the vector's norm </dd></dl>

</div>
</div>
<a class="anchor" id="a21b03c6f25466279eaed82addf1b9e76"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::normalize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Normalize the vector </p><dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a2a2081d8cdac089c8f069c66d11bb212"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::normSquared </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the squared vector's norm </dd></dl>

</div>
</div>
<a class="anchor" id="a98fdc3fb492e71db29d223061bb72974"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Difference test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to test with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's result </dd></dl>

</div>
</div>
<a class="anchor" id="a51413595a6a7d31dd5c65e894040a0c6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt;std::common_type_t&lt;T, K&gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the vector resulting in the multiplication of this by k </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the multiplication factor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the computed vector </dd></dl>

</div>
</div>
<a class="anchor" id="ab3380937115261c2569aba8f84fee517"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt;std::common_type_t&lt;T, K&gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the vector resulting in the multiplication of this by u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the multiplication vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the computed vector </dd></dl>

</div>
</div>
<a class="anchor" id="ac94a500ffe2d3fc700a5d7c7b09d52a2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator*= </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Multiply this by a factor k </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the multiplication factor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a9c2b1751bec762161a05ecc7635aebd3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator*= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Multiply this by a vector u, component by component </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the multiplication vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="af3d182b98e3057905baec9cd214fe59a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt;std::common_type_t&lt;T, K&gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator+ </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the vector resulting in the addition of k into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the scalar to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the computed vector </dd></dl>

</div>
</div>
<a class="anchor" id="a12812de610203faa97d948cb81c64fb0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt;std::common_type_t&lt;T, K&gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator+ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the vector resulting in the addition of u into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the computed vector </dd></dl>

</div>
</div>
<a class="anchor" id="a45e82496cbbb4b3fe17371e5ca2fb741"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Add a scalar to all components </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the scalar to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="aec4829fe87f20ac64fc10b16a62acc9b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add a vector into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to add into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="abc3c0fa6b2c48e043dc3957538130fe7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt;std::common_type_t&lt;T, K&gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the vector resulting in the subtraction of k into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the scalar to subtract </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the computed vector </dd></dl>

</div>
</div>
<a class="anchor" id="a247fa0fe8e74001116816fbe16c0e989"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt;std::common_type_t&lt;T, K&gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the vector resulting in the subtraction of u into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to subtract </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the computed vector </dd></dl>

</div>
</div>
<a class="anchor" id="a218bee25eb6030898bef54cc3bf6ba81"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a> <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator- </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the opposite version of this </p><dl class="section return"><dt>Returns</dt><dd>the opposite vector </dd></dl>

</div>
</div>
<a class="anchor" id="ac4b63d2951633833f5d64ca0aff504b8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator-= </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Subtract a scalar to all components </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the scalar to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="ac00b78f660f368b7ec40464bd299c9c4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator-= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Subtract a vector into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to subtract into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="abbb2b702f3350747afc8cf6d6d22ece3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt;std::common_type_t&lt;T, K&gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator/ </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the vector resulting in the division of this by k </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the division factor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the computed vector </dd></dl>

</div>
</div>
<a class="anchor" id="ae865ff78306f8529a05169d1f1a7e643"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt;std::common_type_t&lt;T, K&gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator/ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the vector resulting in the division of this by u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the division vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the computed vector </dd></dl>

</div>
</div>
<a class="anchor" id="a1d649c08e564985fe3b384b091c2939a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator/= </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Divide this by a factor k </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">k</td><td>the division factor </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a09a805f039ef168028d8c87c9bdf4603"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator/= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Divide this by a vector u, component by component </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the division vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="af8341b231e33641c3dc46b86b3c867e6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator&lt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inferior test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to test with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's result </dd></dl>

</div>
</div>
<a class="anchor" id="a903ec0e2b2d155374bd0b1b4628d9fe4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Inferior or Equal test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to test with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's result </dd></dl>

</div>
</div>
<a class="anchor" id="a38351021bd55581104833d541cf5b23e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; T &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Copy u into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the object to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="aabed27a6c2be057c26fd467612431215"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Move u into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the object to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="aec0df726aee79886ecca5a05cb60a7a4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy u into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the object to copy into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a9fd0026ca27ca633e5cb8bf34665087b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Move u into this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the object to move into this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="acd4672ebad8a9c5cc3cad77896ec0c37"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Equality test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to test with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's result </dd></dl>

</div>
</div>
<a class="anchor" id="adcc4e15c47bc73e4563f8a5f500a672c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator&gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Superior test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to test with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's result </dd></dl>

</div>
</div>
<a class="anchor" id="af5fd1cc3d03861b731cab5f40e9d2265"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Superior or Equal test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector to test with this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's result </dd></dl>

</div>
</div>
<a class="anchor" id="a91b3cdd355ebc5dda8e1107cb8eeae53"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return a reference on a vector's object </p><dl class="section warning"><dt>Warning</dt><dd>No range check performed </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the object's index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the object's reference </dd></dl>

</div>
</div>
<a class="anchor" id="a8393f862389acf1a8692b90e2fe7b8db"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T const&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return a const reference on a vector's object </p><dl class="section warning"><dt>Warning</dt><dd>No range check performed </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>the object's index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the object's reference </dd></dl>

</div>
</div>
<a class="anchor" id="ae8967384f96c5caa83f7a23417bbb515"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::common_type_t&lt;T, K&gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator| </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the scalar product between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the scalar product </dd></dl>

</div>
</div>
<a class="anchor" id="a41153538045f45a46a9eb09e5131ec27"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr std::common_type_t&lt;T, K&gt; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::operator|= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the scalar product between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the scalar product </dd></dl>

</div>
</div>
<a class="anchor" id="af79ae133431dc31acc7ae1cb17dba7a6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::pow </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Raise all components to the given power </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>the power to which to raise this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="a1ca861dd2ea247f94885776b71321a5a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::pow </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D</a>&lt; K &gt; const &amp;&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Raise all components to the given power vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>the set of power to which to raise this </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the reference of himself </dd></dl>

</div>
</div>
<a class="anchor" id="acae2dba8997626d0f54407d1c7bc79f2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , class L , typename  = UseIfArithmetic&lt;K, L&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::setCoord </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>nX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">L&#160;</td>
          <td class="paramname"><em>nY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the values for both x and y </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nX</td><td>the new value for x </td></tr>
    <tr><td class="paramname">nY</td><td>the new value for y </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a13dd252d891b09a377bf8803c35f4cb1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::setH </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>h</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Y setter </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">h</td><td>the new value for y </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8fbd52013cb716f9f3db5b705c746220"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , class L , typename  = UseIfArithmetic&lt;K, L&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::setSize </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">L&#160;</td>
          <td class="paramname"><em>h</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the values for both x and y </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">w</td><td>the new value for x </td></tr>
    <tr><td class="paramname">h</td><td>the new value for y </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acbb877be71ee64451f25590bf0291870"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::setW </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>w</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>X setter </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">w</td><td>the new value for x </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ace6ab9e4c0fd771160bf628f376b1db2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::setX </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>nX</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>X setter </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nX</td><td>the new value for x </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a894ce62ab59938f6fea66277cd0f589a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class K , typename  = UseIfArithmetic&lt;K&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr void <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::setY </td>
          <td>(</td>
          <td class="paramtype">K&#160;</td>
          <td class="paramname"><em>nY</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Y setter </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">nY</td><td>the new value for y </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad7fe6559e4da3d52f42b40d6d59e800a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Utility::String <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert the vector into a string </p><dl class="section return"><dt>Returns</dt><dd>the converted vector </dd></dl>

</div>
</div>
<a class="anchor" id="a89a59b504112afa558f7af55c6b27e6f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr const T* <a class="el" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt; T &gt;::value </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a pointer to the vector's data </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Math/src/Math/Matrix/3D/<a class="el" href="_n_r_e___matrix3x3_8hpp_source.php">NRE_Matrix3x3.hpp</a></li>
<li>/mnt/c/Users/abell/Documents/GitHub/NRE-Math/src/Math/Vector/2D/<a class="el" href="_n_r_e___vector2_d_8hpp_source.php">NRE_Vector2D.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
