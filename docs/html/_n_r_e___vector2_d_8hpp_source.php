<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Math: /mnt/c/Users/abell/Documents/GitHub/NRE-Math/src/Math/Vector/2D/NRE_Vector2D.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
      <li><a href="globals.php"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_3813464283bee2267f39dcf080a84d74.php">Math</a></li><li class="navelem"><a class="el" href="dir_4005e686f12f80d4c04432a698da12f8.php">Vector</a></li><li class="navelem"><a class="el" href="dir_297243e99995d447ae342dcea0dbde2d.php">2D</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_Vector2D.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___vector2_d_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">    #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">    #include &lt;Utility/String/NRE_String.hpp&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">    #include &lt;Utility/Interfaces/Stringable/NRE_Stringable.hpp&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">    #include &quot;../../NRE_Math.hpp&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">    #include &lt;cassert&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_math.php">Math</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">class</span>&gt; <span class="keyword">class </span>Vector3D;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">class</span>&gt; <span class="keyword">class </span>Vector4D;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keyword">class </span>Vector2D : <span class="keyword">public</span> Utility::Stringable&lt;Vector2D&lt;T&gt;&gt; {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                static_assert(ArithmeticCheckerV&lt;T&gt;); </div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                <span class="keyword">private</span> :   <span class="comment">// Fields</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                    T x = 0;    </div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                    T y = 0;    </div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">Vector2D</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> L, <span class="keyword">typename</span> = UseIfArithmetic&lt;K, L&gt;&gt;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aa9352b1c9885642ba4440eabb31ee008">   56</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aa9352b1c9885642ba4440eabb31ee008">Vector2D</a>(K nX, L nY) : x(static_cast &lt;T&gt; (nX)), y(static_cast &lt;T&gt; (nY)) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1bbd03092f4ae17cb30353903efd7cab">   63</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1bbd03092f4ae17cb30353903efd7cab">Vector2D</a>(K <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a89a59b504112afa558f7af55c6b27e6f">value</a>) : Vector2D(value, value) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                        }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">Vector2D</a>(std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                    <span class="comment">//## Copy-Constructor ##//</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">Vector2D</a>(Vector2D <span class="keyword">const</span>&amp; u) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="comment">//## Move-Constructor ##//</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">Vector2D</a>(Vector2D &amp;&amp; u) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="comment">//## Convertor ##//</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">Vector2D</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">Vector2D</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">Vector2D</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector4_d.php">Vector4D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#aeb663aece6c51298c9da392e8d338474">~Vector2D</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span>                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a3a2394b397491fcd9493a1108f30109c">getX</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acab4df35acef9a21408882db7b0dea7a">getY</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a461b9839c89b36b8b1d3339dca283f7e">getW</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a43e9ed15954cf730cf3154ffec09bb61">getH</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="comment">//## Setter ##//</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">  135</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(K nX) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            x = static_cast &lt;T&gt; (nX);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">  143</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(K nY) {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                            y = static_cast &lt;T&gt; (nY);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acbb877be71ee64451f25590bf0291870">  151</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acbb877be71ee64451f25590bf0291870">setW</a>(K w) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(w);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a13dd252d891b09a377bf8803c35f4cb1">  159</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a13dd252d891b09a377bf8803c35f4cb1">setH</a>(K h) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(h);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> L, <span class="keyword">typename</span> = UseIfArithmetic&lt;K, L&gt;&gt;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acae2dba8997626d0f54407d1c7bc79f2">  168</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acae2dba8997626d0f54407d1c7bc79f2">setCoord</a>(K nX, L nY) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(nX);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(nY);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                        }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> L, <span class="keyword">typename</span> = UseIfArithmetic&lt;K, L&gt;&gt;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a8fbd52013cb716f9f3db5b705c746220">  178</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a8fbd52013cb716f9f3db5b705c746220">setSize</a>(K w, L h) {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(w);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(h);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span>                        <span class="keywordtype">long</span> <span class="keywordtype">double</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a80e71b0c2736cde5dc3695f2c320609f">norm</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a2a2081d8cdac089c8f069c66d11bb212">normSquared</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        <span class="keywordtype">long</span> <span class="keywordtype">double</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a9a56b45efe2942ad1dc694007e9d2946">distance</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; v) <span class="keyword">const</span>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        constexpr std::common_type_t&lt;T, K&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a7ac6e10b0f77196c11a339b035e01eb0">distanceSquared</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; v) <span class="keyword">const</span>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a21b03c6f25466279eaed82addf1b9e76">normalize</a>();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a916ef2c335329680e35d9012a29b1af5">  212</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a916ef2c335329680e35d9012a29b1af5">limit</a>(K max) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                            <span class="keyword">auto</span> n = <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a80e71b0c2736cde5dc3695f2c320609f">norm</a>();</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                            <span class="keywordflow">if</span> (n &gt; max) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a21b03c6f25466279eaed82addf1b9e76">normalize</a>();</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                            }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af79ae133431dc31acc7ae1cb17dba7a6">  224</a></span>&#160;                        Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af79ae133431dc31acc7ae1cb17dba7a6">pow</a>(K p) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(std::pow(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x), static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (p)));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(std::pow(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y), static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (p)));</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af79ae133431dc31acc7ae1cb17dba7a6">pow</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; p);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        constexpr <span class="keyword">const</span> T* <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a89a59b504112afa558f7af55c6b27e6f">value</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment"></span>                        constexpr T&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a91b3cdd355ebc5dda8e1107cb8eeae53">operator []</a>(std::size_t index);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                        constexpr T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a91b3cdd355ebc5dda8e1107cb8eeae53">operator []</a>(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"></span>                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a38351021bd55581104833d541cf5b23e">operator =</a>(Vector2D <span class="keyword">const</span>&amp; u) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a38351021bd55581104833d541cf5b23e">operator =</a>(Vector2D &amp;&amp; u) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a38351021bd55581104833d541cf5b23e">operator =</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a38351021bd55581104833d541cf5b23e">operator =</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> &amp;&amp; u);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="comment">//## Shortcut Operator ##//</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a45e82496cbbb4b3fe17371e5ca2fb741">  292</a></span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a45e82496cbbb4b3fe17371e5ca2fb741">operator +=</a>(K k) {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x) + static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y) + static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a45e82496cbbb4b3fe17371e5ca2fb741">operator +=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac4b63d2951633833f5d64ca0aff504b8">  310</a></span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac4b63d2951633833f5d64ca0aff504b8">operator -=</a>(K k) {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x) - static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y) - static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac4b63d2951633833f5d64ca0aff504b8">operator -=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac94a500ffe2d3fc700a5d7c7b09d52a2">  328</a></span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac94a500ffe2d3fc700a5d7c7b09d52a2">operator *=</a>(K k) {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x) * static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y) * static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                        }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac94a500ffe2d3fc700a5d7c7b09d52a2">operator *=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1d649c08e564985fe3b384b091c2939a">  346</a></span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1d649c08e564985fe3b384b091c2939a">operator /=</a>(K k) {</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">setX</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x) / static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">setY</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y) / static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                        constexpr Vector2D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1d649c08e564985fe3b384b091c2939a">operator /=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                        constexpr std::common_type_t&lt;T, K&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a41153538045f45a46a9eb09e5131ec27">operator |=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                    <span class="comment">//## Arithmetic Operator ##//</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af3d182b98e3057905baec9cd214fe59a">  373</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af3d182b98e3057905baec9cd214fe59a">operator +</a>(K k)<span class="keyword"> const </span>{</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(*this) += k;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                        }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af3d182b98e3057905baec9cd214fe59a">operator +</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#abc3c0fa6b2c48e043dc3957538130fe7">  389</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a218bee25eb6030898bef54cc3bf6ba81">operator -</a>(K k)<span class="keyword"> const </span>{</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(*this) -= k;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a218bee25eb6030898bef54cc3bf6ba81">operator -</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                        constexpr Vector2D <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a218bee25eb6030898bef54cc3bf6ba81">operator -</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a51413595a6a7d31dd5c65e894040a0c6">  410</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a51413595a6a7d31dd5c65e894040a0c6">operator *</a>(K k)<span class="keyword"> const </span>{</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(*this) *= k;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                        }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a51413595a6a7d31dd5c65e894040a0c6">operator *</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector2_d.php#abbb2b702f3350747afc8cf6d6d22ece3">  426</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#abbb2b702f3350747afc8cf6d6d22ece3">operator /</a>(K k)<span class="keyword"> const </span>{</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(*this) /= k;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                        }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#abbb2b702f3350747afc8cf6d6d22ece3">operator /</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        constexpr std::common_type_t&lt;T, K&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ae8967384f96c5caa83f7a23417bbb515">operator |</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                    <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acd4672ebad8a9c5cc3cad77896ec0c37">operator ==</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a98fdc3fb492e71db29d223061bb72974">operator !=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                        constexpr <span class="keywordtype">bool</span> operator &lt;(Vector2D&lt;K&gt; <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#adcc4e15c47bc73e4563f8a5f500a672c">operator &gt;</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                        constexpr <span class="keywordtype">bool</span> operator &lt;=(Vector2D&lt;K&gt; <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af5fd1cc3d03861b731cab5f40e9d2265">operator &gt;=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    <span class="comment">//## Stream Operator ##//</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment"></span>                        Utility::String <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#ad7fe6559e4da3d52f42b40d6d59e800a">toString</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            };</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    </div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="_n_r_e___vector2_d_8hpp.php#a006bc15dc253207108534af8c72f902d">  503</a></span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a51413595a6a7d31dd5c65e894040a0c6">operator *</a>(K k, <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                <span class="keywordflow">return</span> u * k;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            }</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;T&gt;</a> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a21b03c6f25466279eaed82addf1b9e76">normalize</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00520"></a><span class="lineno"><a class="line" href="_n_r_e___vector2_d_8hpp.php#ad0ee7ad7832d6312f287d1e862adcfd4">  520</a></span>&#160;            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af79ae133431dc31acc7ae1cb17dba7a6">pow</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u, K k) {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(u).<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af79ae133431dc31acc7ae1cb17dba7a6">pow</a>(k);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            }</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#af79ae133431dc31acc7ae1cb17dba7a6">pow</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u, <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; p);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="_n_r_e___vector2_d_8hpp.php#a94f06e0023c567d982fc8e4238366987">reflect</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u, <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; n);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00542"></a><span class="lineno"><a class="line" href="_n_r_e___vector2_d_8hpp.php#a690b5146906034f4c061a38abee6d8c6">  542</a></span>&#160;            <span class="keyword">using</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Point2D</a> = <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;T&gt;</a>;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        }</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    }</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespacestd.php">std</a> {</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00556"></a><span class="lineno"><a class="line" href="structstd_1_1common__type_3_01_n_r_e_1_1_math_1_1_vector2_d_3_01_t_01_4_00_01_n_r_e_1_1_math_1_1_vector2_d_3_01_k_01_4_01_4.php">  556</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="classcommon__type.php">common_type</a>&lt;<a class="code" href="namespace_n_r_e.php">NRE</a>::Math::Vector2D&lt;T&gt;, <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a>&lt;K&gt;&gt; {</div><div class="line"><a name="l00558"></a><span class="lineno"><a class="line" href="structstd_1_1common__type_3_01_n_r_e_1_1_math_1_1_vector2_d_3_01_t_01_4_00_01_n_r_e_1_1_math_1_1_vector2_d_3_01_k_01_4_01_4.php#afc21de677515f8bc7aad2bfd1f9d9940">  558</a></span>&#160;            <span class="keyword">using</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">type</a> = <a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D&lt;common_type_t&lt;T, K&gt;</a>&gt;;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        };</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    }</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="preprocessor">    #include &quot;NRE_Vector2D.tpp&quot;</span></div><div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a98fdc3fb492e71db29d223061bb72974"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a98fdc3fb492e71db29d223061bb72974">NRE::Math::Vector2D::operator!=</a></div><div class="ttdeci">constexpr bool operator!=(Vector2D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a89a59b504112afa558f7af55c6b27e6f"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a89a59b504112afa558f7af55c6b27e6f">NRE::Math::Vector2D::value</a></div><div class="ttdeci">constexpr const T * value() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a></div><div class="ttdoc">A cartesian 2D vector. </div><div class="ttdef"><b>Definition:</b> NRE_Matrix3x3.hpp:32</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_adcc4e15c47bc73e4563f8a5f500a672c"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#adcc4e15c47bc73e4563f8a5f500a672c">NRE::Math::Vector2D::operator&gt;</a></div><div class="ttdeci">constexpr bool operator&gt;(Vector2D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a45e82496cbbb4b3fe17371e5ca2fb741"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a45e82496cbbb4b3fe17371e5ca2fb741">NRE::Math::Vector2D::operator+=</a></div><div class="ttdeci">constexpr Vector2D &amp; operator+=(K k)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:292</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a43e9ed15954cf730cf3154ffec09bb61"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a43e9ed15954cf730cf3154ffec09bb61">NRE::Math::Vector2D::getH</a></div><div class="ttdeci">constexpr T getH() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_ace6ab9e4c0fd771160bf628f376b1db2"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#ace6ab9e4c0fd771160bf628f376b1db2">NRE::Math::Vector2D::setX</a></div><div class="ttdeci">constexpr void setX(K nX)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:135</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a2a2081d8cdac089c8f069c66d11bb212"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a2a2081d8cdac089c8f069c66d11bb212">NRE::Math::Vector2D::normSquared</a></div><div class="ttdeci">constexpr T normSquared() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a461b9839c89b36b8b1d3339dca283f7e"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a461b9839c89b36b8b1d3339dca283f7e">NRE::Math::Vector2D::getW</a></div><div class="ttdeci">constexpr T getW() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_acd4672ebad8a9c5cc3cad77896ec0c37"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#acd4672ebad8a9c5cc3cad77896ec0c37">NRE::Math::Vector2D::operator==</a></div><div class="ttdeci">constexpr bool operator==(Vector2D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_ac4b63d2951633833f5d64ca0aff504b8"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac4b63d2951633833f5d64ca0aff504b8">NRE::Math::Vector2D::operator-=</a></div><div class="ttdeci">constexpr Vector2D &amp; operator-=(K k)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:310</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a41153538045f45a46a9eb09e5131ec27"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a41153538045f45a46a9eb09e5131ec27">NRE::Math::Vector2D::operator|=</a></div><div class="ttdeci">constexpr std::common_type_t&lt; T, K &gt; operator|=(Vector2D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_af3d182b98e3057905baec9cd214fe59a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#af3d182b98e3057905baec9cd214fe59a">NRE::Math::Vector2D::operator+</a></div><div class="ttdeci">constexpr Vector2D&lt; std::common_type_t&lt; T, K &gt; &gt; operator+(K k) const </div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:373</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_aeb663aece6c51298c9da392e8d338474"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#aeb663aece6c51298c9da392e8d338474">NRE::Math::Vector2D::~Vector2D</a></div><div class="ttdeci">~Vector2D()=default</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_abbb2b702f3350747afc8cf6d6d22ece3"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#abbb2b702f3350747afc8cf6d6d22ece3">NRE::Math::Vector2D::operator/</a></div><div class="ttdeci">constexpr Vector2D&lt; std::common_type_t&lt; T, K &gt; &gt; operator/(K k) const </div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:426</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a7ac6e10b0f77196c11a339b035e01eb0"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a7ac6e10b0f77196c11a339b035e01eb0">NRE::Math::Vector2D::distanceSquared</a></div><div class="ttdeci">constexpr std::common_type_t&lt; T, K &gt; distanceSquared(Vector2D&lt; K &gt; const &amp;v) const </div></div>
<div class="ttc" id="namespace_math_php"><div class="ttname"><a href="namespace_math.php">Math</a></div><div class="ttdoc">Math&amp;#39;s API. </div></div>
<div class="ttc" id="classcommon__type_php"><div class="ttname"><a href="classcommon__type.php">common_type</a></div><div class="ttdoc">Manage common_type test. </div></div>
<div class="ttc" id="namespacestd_php"><div class="ttname"><a href="namespacestd.php">std</a></div><div class="ttdoc">The stl standard namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_aa9352b1c9885642ba4440eabb31ee008"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#aa9352b1c9885642ba4440eabb31ee008">NRE::Math::Vector2D::Vector2D</a></div><div class="ttdeci">constexpr Vector2D(K nX, L nY)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:56</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php">NRE::Math::Vector3D</a></div><div class="ttdoc">A cartesian 3D vector, 2D homogeneous. </div><div class="ttdef"><b>Definition:</b> NRE_Matrix3x3.hpp:33</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a8fbd52013cb716f9f3db5b705c746220"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a8fbd52013cb716f9f3db5b705c746220">NRE::Math::Vector2D::setSize</a></div><div class="ttdeci">constexpr void setSize(K w, L h)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:178</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a9a56b45efe2942ad1dc694007e9d2946"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a9a56b45efe2942ad1dc694007e9d2946">NRE::Math::Vector2D::distance</a></div><div class="ttdeci">long double distance(Vector2D&lt; K &gt; const &amp;v) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_acbb877be71ee64451f25590bf0291870"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#acbb877be71ee64451f25590bf0291870">NRE::Math::Vector2D::setW</a></div><div class="ttdeci">constexpr void setW(K w)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:151</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_ad7fe6559e4da3d52f42b40d6d59e800a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#ad7fe6559e4da3d52f42b40d6d59e800a">NRE::Math::Vector2D::toString</a></div><div class="ttdeci">Utility::String toString() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a894ce62ab59938f6fea66277cd0f589a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a894ce62ab59938f6fea66277cd0f589a">NRE::Math::Vector2D::setY</a></div><div class="ttdeci">constexpr void setY(K nY)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:143</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_af79ae133431dc31acc7ae1cb17dba7a6"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#af79ae133431dc31acc7ae1cb17dba7a6">NRE::Math::Vector2D::pow</a></div><div class="ttdeci">Vector2D &amp; pow(K p)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:224</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a38351021bd55581104833d541cf5b23e"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a38351021bd55581104833d541cf5b23e">NRE::Math::Vector2D::operator=</a></div><div class="ttdeci">constexpr Vector2D &amp; operator=(Vector2D const &amp;u)=default</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a1d649c08e564985fe3b384b091c2939a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1d649c08e564985fe3b384b091c2939a">NRE::Math::Vector2D::operator/=</a></div><div class="ttdeci">constexpr Vector2D &amp; operator/=(K k)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:346</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a08df7e86401cbf476042bd05ff4f76bd"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a08df7e86401cbf476042bd05ff4f76bd">NRE::Math::Vector2D::Vector2D</a></div><div class="ttdeci">constexpr Vector2D()=default</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_af5fd1cc3d03861b731cab5f40e9d2265"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#af5fd1cc3d03861b731cab5f40e9d2265">NRE::Math::Vector2D::operator&gt;=</a></div><div class="ttdeci">constexpr bool operator&gt;=(Vector2D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a13dd252d891b09a377bf8803c35f4cb1"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a13dd252d891b09a377bf8803c35f4cb1">NRE::Math::Vector2D::setH</a></div><div class="ttdeci">constexpr void setH(K h)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:159</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a21b03c6f25466279eaed82addf1b9e76"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a21b03c6f25466279eaed82addf1b9e76">NRE::Math::Vector2D::normalize</a></div><div class="ttdeci">Vector2D &amp; normalize()</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector4_d_php"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector4_d.php">NRE::Math::Vector4D</a></div><div class="ttdoc">A cartesian 4D vector, 3D homogeneous. </div><div class="ttdef"><b>Definition:</b> NRE_Matrix4x4.hpp:34</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a3a2394b397491fcd9493a1108f30109c"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a3a2394b397491fcd9493a1108f30109c">NRE::Math::Vector2D::getX</a></div><div class="ttdeci">constexpr T getX() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_ae8967384f96c5caa83f7a23417bbb515"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#ae8967384f96c5caa83f7a23417bbb515">NRE::Math::Vector2D::operator|</a></div><div class="ttdeci">constexpr std::common_type_t&lt; T, K &gt; operator|(Vector2D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a51413595a6a7d31dd5c65e894040a0c6"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a51413595a6a7d31dd5c65e894040a0c6">NRE::Math::Vector2D::operator*</a></div><div class="ttdeci">constexpr Vector2D&lt; std::common_type_t&lt; T, K &gt; &gt; operator*(K k) const </div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:410</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a1bbd03092f4ae17cb30353903efd7cab"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a1bbd03092f4ae17cb30353903efd7cab">NRE::Math::Vector2D::Vector2D</a></div><div class="ttdeci">constexpr Vector2D(K value)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:63</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a80e71b0c2736cde5dc3695f2c320609f"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a80e71b0c2736cde5dc3695f2c320609f">NRE::Math::Vector2D::norm</a></div><div class="ttdeci">long double norm() const </div></div>
<div class="ttc" id="_n_r_e___vector2_d_8hpp_php_a94f06e0023c567d982fc8e4238366987"><div class="ttname"><a href="_n_r_e___vector2_d_8hpp.php#a94f06e0023c567d982fc8e4238366987">NRE::Math::reflect</a></div><div class="ttdeci">constexpr Vector2D&lt; std::common_type_t&lt; T, K &gt; &gt; reflect(Vector2D&lt; T &gt; const &amp;u, Vector2D&lt; K &gt; const &amp;n)</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a916ef2c335329680e35d9012a29b1af5"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a916ef2c335329680e35d9012a29b1af5">NRE::Math::Vector2D::limit</a></div><div class="ttdeci">void limit(K max)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:212</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a218bee25eb6030898bef54cc3bf6ba81"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a218bee25eb6030898bef54cc3bf6ba81">NRE::Math::Vector2D::operator-</a></div><div class="ttdeci">constexpr Vector2D operator-() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_acab4df35acef9a21408882db7b0dea7a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#acab4df35acef9a21408882db7b0dea7a">NRE::Math::Vector2D::getY</a></div><div class="ttdeci">constexpr T getY() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_acae2dba8997626d0f54407d1c7bc79f2"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#acae2dba8997626d0f54407d1c7bc79f2">NRE::Math::Vector2D::setCoord</a></div><div class="ttdeci">constexpr void setCoord(K nX, L nY)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:168</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a91b3cdd355ebc5dda8e1107cb8eeae53"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a91b3cdd355ebc5dda8e1107cb8eeae53">NRE::Math::Vector2D::operator[]</a></div><div class="ttdeci">constexpr T &amp; operator[](std::size_t index)</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_ac94a500ffe2d3fc700a5d7c7b09d52a2"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#ac94a500ffe2d3fc700a5d7c7b09d52a2">NRE::Math::Vector2D::operator*=</a></div><div class="ttdeci">constexpr Vector2D &amp; operator*=(K k)</div><div class="ttdef"><b>Definition:</b> NRE_Vector2D.hpp:328</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
