<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.15"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Math: NRE::Math::Unit&lt; M, L, T, A &gt; Class Template Reference</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespace_n_r_e.php">NRE</a></li><li class="navelem"><b>Math</b></li><li class="navelem"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_n_r_e_1_1_math_1_1_unit-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NRE::Math::Unit&lt; M, L, T, A &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Used to define clear physical unit.  
 <a href="class_n_r_e_1_1_math_1_1_unit.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_n_r_e___unit_8hpp_source.php">NRE_Unit.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NRE::Math::Unit&lt; M, L, T, A &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_n_r_e_1_1_math_1_1_unit.png" alt=""/>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:acde0194bb69bc8d6bebf8ceb0b142426"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#acde0194bb69bc8d6bebf8ceb0b142426">Unit</a> ()</td></tr>
<tr class="separator:acde0194bb69bc8d6bebf8ceb0b142426"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad35ea8e9a0c033c4a7dbb5ed85c697d5"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#ad35ea8e9a0c033c4a7dbb5ed85c697d5">Unit</a> (double val)</td></tr>
<tr class="separator:ad35ea8e9a0c033c4a7dbb5ed85c697d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6f50b4134b5da67ed498f0ef167b602"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#aa6f50b4134b5da67ed498f0ef167b602">Unit</a> (long double val)</td></tr>
<tr class="separator:aa6f50b4134b5da67ed498f0ef167b602"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57dd696d1b37975396c38205a1a64912"><td class="memItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#a57dd696d1b37975396c38205a1a64912">getValue</a> () const</td></tr>
<tr class="separator:a57dd696d1b37975396c38205a1a64912"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a728734518d0ef3c6fbe39e8093d44287"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; std::ratio_divide&lt; M, std::ratio&lt; 2 &gt; &gt;, std::ratio_divide&lt; L, std::ratio&lt; 2 &gt; &gt;, std::ratio_divide&lt; T, std::ratio&lt; 2 &gt; &gt;, std::ratio_divide&lt; A, std::ratio&lt; 2 &gt; &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#a728734518d0ef3c6fbe39e8093d44287">sqrt</a> ()</td></tr>
<tr class="separator:a728734518d0ef3c6fbe39e8093d44287"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af70cf71def75fa1c8c6daa7a083ec8e3"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const  &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#af70cf71def75fa1c8c6daa7a083ec8e3">operator+=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u)</td></tr>
<tr class="separator:af70cf71def75fa1c8c6daa7a083ec8e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af36c98e1e59edd06148aced23fd0b347"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const  &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#af36c98e1e59edd06148aced23fd0b347">operator-=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u)</td></tr>
<tr class="separator:af36c98e1e59edd06148aced23fd0b347"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37d034259d9b9a449e853e155300621c"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#a37d034259d9b9a449e853e155300621c">operator-</a> () const</td></tr>
<tr class="separator:a37d034259d9b9a449e853e155300621c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90e5f527460ff2f51fc6fb1d5c6dbde1"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#a90e5f527460ff2f51fc6fb1d5c6dbde1">operator+</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u) const</td></tr>
<tr class="separator:a90e5f527460ff2f51fc6fb1d5c6dbde1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a288649a62a1830ea55de2465b382e173"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#a288649a62a1830ea55de2465b382e173">operator-</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u) const</td></tr>
<tr class="separator:a288649a62a1830ea55de2465b382e173"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03ed37f6024fd734b24cce0b9d921012"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#a03ed37f6024fd734b24cce0b9d921012">operator==</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u) const</td></tr>
<tr class="separator:a03ed37f6024fd734b24cce0b9d921012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad71fa41e004cbebe52bdf8b732315841"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#ad71fa41e004cbebe52bdf8b732315841">operator!=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u) const</td></tr>
<tr class="separator:ad71fa41e004cbebe52bdf8b732315841"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dc17fea4e225bc9e414e630ce70305c"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#a6dc17fea4e225bc9e414e630ce70305c">operator&lt;=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u) const</td></tr>
<tr class="separator:a6dc17fea4e225bc9e414e630ce70305c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acce2c22ec4b54ea49dd7e28f1028a3cd"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#acce2c22ec4b54ea49dd7e28f1028a3cd">operator&gt;=</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u) const</td></tr>
<tr class="separator:acce2c22ec4b54ea49dd7e28f1028a3cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0730cc8f070999a8d7e0d9e22acd4f2"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#ab0730cc8f070999a8d7e0d9e22acd4f2">operator&lt;</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u) const</td></tr>
<tr class="separator:ab0730cc8f070999a8d7e0d9e22acd4f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab566f95c37edbd065288664c37f69366"><td class="memItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#ab566f95c37edbd065288664c37f69366">operator&gt;</a> (<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const &amp;u) const</td></tr>
<tr class="separator:ab566f95c37edbd065288664c37f69366"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc40fb2d7b685adb6e43098da962275d"><td class="memItemLeft" align="right" valign="top">Utility::String&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php#adc40fb2d7b685adb6e43098da962275d">toString</a> () const</td></tr>
<tr class="separator:adc40fb2d7b685adb6e43098da962275d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class M, class L, class T, class A&gt;<br />
class NRE::Math::Unit&lt; M, L, T, A &gt;</h3>

<p>Used to define clear physical unit. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="acde0194bb69bc8d6bebf8ceb0b142426"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acde0194bb69bc8d6bebf8ceb0b142426">&#9670;&nbsp;</a></span>Unit() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Default constructor </p>

</div>
</div>
<a id="ad35ea8e9a0c033c4a7dbb5ed85c697d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad35ea8e9a0c033c4a7dbb5ed85c697d5">&#9670;&nbsp;</a></span>Unit() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Construct a unit from a value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>the base value </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa6f50b4134b5da67ed498f0ef167b602"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6f50b4134b5da67ed498f0ef167b602">&#9670;&nbsp;</a></span>Unit() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::<a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> </td>
          <td>(</td>
          <td class="paramtype">long double&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Construct a unit from a value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>the base value </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a57dd696d1b37975396c38205a1a64912"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57dd696d1b37975396c38205a1a64912">&#9670;&nbsp;</a></span>getValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr double <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::getValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Value getter </p><dl class="section return"><dt>Returns</dt><dd>the internal value </dd></dl>

</div>
</div>
<a id="ad71fa41e004cbebe52bdf8b732315841"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad71fa41e004cbebe52bdf8b732315841">&#9670;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Difference test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to test with u </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's value </dd></dl>

</div>
</div>
<a id="a90e5f527460ff2f51fc6fb1d5c6dbde1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90e5f527460ff2f51fc6fb1d5c6dbde1">&#9670;&nbsp;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator+ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the unit resulting in the addition of a unit to this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the resulting unit </dd></dl>

</div>
</div>
<a id="af70cf71def75fa1c8c6daa7a083ec8e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af70cf71def75fa1c8c6daa7a083ec8e3">&#9670;&nbsp;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator+= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Add a unit to this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a reference to himself </dd></dl>

</div>
</div>
<a id="a37d034259d9b9a449e853e155300621c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37d034259d9b9a449e853e155300621c">&#9670;&nbsp;</a></span>operator-() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator- </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the opposite unit </p><dl class="section return"><dt>Returns</dt><dd>the new unit with opposite value </dd></dl>

</div>
</div>
<a id="a288649a62a1830ea55de2465b382e173"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a288649a62a1830ea55de2465b382e173">&#9670;&nbsp;</a></span>operator-() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator- </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the unit resulting in the subtraction of a unit to this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to add </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the resulting unit </dd></dl>

</div>
</div>
<a id="af36c98e1e59edd06148aced23fd0b347"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af36c98e1e59edd06148aced23fd0b347">&#9670;&nbsp;</a></span>operator-=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> const&amp; <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator-= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Subtract a unit to this </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to subtract </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a reference to himself </dd></dl>

</div>
</div>
<a id="ab0730cc8f070999a8d7e0d9e22acd4f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0730cc8f070999a8d7e0d9e22acd4f2">&#9670;&nbsp;</a></span>operator&lt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator&lt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Inferior test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to test with u </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's value </dd></dl>

</div>
</div>
<a id="a6dc17fea4e225bc9e414e630ce70305c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dc17fea4e225bc9e414e630ce70305c">&#9670;&nbsp;</a></span>operator&lt;=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Superior or Equal test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to test with u </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's value </dd></dl>

</div>
</div>
<a id="a03ed37f6024fd734b24cce0b9d921012"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03ed37f6024fd734b24cce0b9d921012">&#9670;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Equality test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to test with u </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's value </dd></dl>

</div>
</div>
<a id="ab566f95c37edbd065288664c37f69366"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab566f95c37edbd065288664c37f69366">&#9670;&nbsp;</a></span>operator&gt;()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator&gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Superior test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to test with u </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's value </dd></dl>

</div>
</div>
<a id="acce2c22ec4b54ea49dd7e28f1028a3cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acce2c22ec4b54ea49dd7e28f1028a3cd">&#9670;&nbsp;</a></span>operator&gt;=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr bool <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt; M, L, T, A &gt; const &amp;&#160;</td>
          <td class="paramname"><em>u</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Inferior or Equal test between this and u </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">u</td><td>the unit to test with u </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the test's value </dd></dl>

</div>
</div>
<a id="a728734518d0ef3c6fbe39e8093d44287"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a728734518d0ef3c6fbe39e8093d44287">&#9670;&nbsp;</a></span>sqrt()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a>&lt;std::ratio_divide&lt;M, std::ratio&lt;2&gt; &gt;, std::ratio_divide&lt;L, std::ratio&lt;2&gt; &gt;, std::ratio_divide&lt;T, std::ratio&lt;2&gt; &gt;, std::ratio_divide&lt;A, std::ratio&lt;2&gt; &gt; &gt; <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::sqrt </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compute the square root from the current unit </p><dl class="section return"><dt>Returns</dt><dd>the computed value </dd></dl>

</div>
</div>
<a id="adc40fb2d7b685adb6e43098da962275d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc40fb2d7b685adb6e43098da962275d">&#9670;&nbsp;</a></span>toString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class M, class L, class T, class A&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Utility::String <a class="el" href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a>&lt; M, L, T, A &gt;::toString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert the unit into a string </p><dl class="section return"><dt>Returns</dt><dd>the converted unit </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>C:/Users/abell/Documents/GitHub/NRE-Math/src/Math/<a class="el" href="_n_r_e___unit_8hpp_source.php">NRE_Unit.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
