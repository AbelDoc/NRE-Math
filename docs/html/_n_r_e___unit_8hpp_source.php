<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Math: /mnt/c/Users/abell/Documents/GitHub/NRE-Math/src/Math/NRE_Unit.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
      <li><a href="globals.php"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_3813464283bee2267f39dcf080a84d74.php">Math</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_Unit.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___unit_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">     #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">     #include &lt;iostream&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">     #include &lt;ratio&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">     #include &lt;Utility/String/NRE_String.hpp&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">     #include &lt;Utility/Interfaces/Stringable/NRE_Stringable.hpp&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">     #include &quot;<a class="code" href="_math_2_n_r_e___math_8hpp.php">NRE_Math.hpp</a>&quot;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_math.php">Math</a> {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> M, <span class="keyword">class</span> L, <span class="keyword">class</span> T, <span class="keyword">class</span> A&gt;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php">   36</a></span>&#160;            <span class="keyword">class </span><a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> : <span class="keyword">public</span> Utility::Stringable&lt;Unit&lt;M, L, T, A&gt;&gt; {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                <span class="keyword">private</span>:    <span class="comment">//Fields</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                    <span class="keywordtype">double</span> value;    </div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                <span class="keyword">public</span>:    <span class="comment">// Methods</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#acde0194bb69bc8d6bebf8ceb0b142426">   45</a></span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#acde0194bb69bc8d6bebf8ceb0b142426">Unit</a>() : value(0.0) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                        }</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#ad35ea8e9a0c033c4a7dbb5ed85c697d5">   51</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#ad35ea8e9a0c033c4a7dbb5ed85c697d5">Unit</a>(<span class="keywordtype">double</span> val) : value(val) {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                        }</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#aa6f50b4134b5da67ed498f0ef167b602">   57</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#aa6f50b4134b5da67ed498f0ef167b602">Unit</a>(<span class="keywordtype">long</span> <span class="keywordtype">double</span> val) : value(static_cast &lt;double&gt; (val)) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">   65</a></span>&#160;<span class="comment"></span>                        constexpr <span class="keywordtype">double</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                            <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;std::ratio_divide&lt;M, std::ratio&lt;2&gt;</a>&gt;, std::ratio_divide&lt;L, std::ratio&lt;2&gt;&gt;, std::ratio_divide&lt;T, std::ratio&lt;2&gt;&gt;, std::ratio_divide&lt;A, std::ratio&lt;2&gt;&gt;&gt;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#a728734518d0ef3c6fbe39e8093d44287">   75</a></span>&#160;                        <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a728734518d0ef3c6fbe39e8093d44287">sqrt</a>() {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                            <span class="keywordflow">return</span> Unit&lt;std::ratio_divide&lt;M, std::ratio&lt;2&gt;&gt;, std::ratio_divide&lt;L, std::ratio&lt;2&gt;&gt;, std::ratio_divide&lt;T, std::ratio&lt;2&gt;&gt;, std::ratio_divide&lt;A, std::ratio&lt;2&gt;&gt;&gt;(value);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                        }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    <span class="comment">//## Shortcut Operator ##//</span></div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#af70cf71def75fa1c8c6daa7a083ec8e3">   85</a></span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#af70cf71def75fa1c8c6daa7a083ec8e3">operator+=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                            value += u.value;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        }</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#af36c98e1e59edd06148aced23fd0b347">   94</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#af36c98e1e59edd06148aced23fd0b347">operator-=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                            value -= u.value;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        }</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#ad395b12f20018095c4ddba74531a4f22">  102</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#ad395b12f20018095c4ddba74531a4f22">operator-</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#acde0194bb69bc8d6bebf8ceb0b142426">Unit</a>(-value);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="comment">//## Arithmetic Operator ##//</span></div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#a571c89a1d60706d1a5d7923feecf5a39">  112</a></span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a571c89a1d60706d1a5d7923feecf5a39">operator+</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u)<span class="keyword"> const </span>{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#acde0194bb69bc8d6bebf8ceb0b142426">Unit</a>(*<span class="keyword">this</span>) += u;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        }</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#a39807af96b26a877e11fd82705f94676">  120</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a39807af96b26a877e11fd82705f94676">operator-</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u)<span class="keyword"> const </span>{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#acde0194bb69bc8d6bebf8ceb0b142426">Unit</a>(*<span class="keyword">this</span>) -= u;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                        }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#a3e285181e6cbf15a0c03235062bfb3a0">  130</a></span>&#160;<span class="comment"></span>                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a3e285181e6cbf15a0c03235062bfb3a0">operator==</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u)<span class="keyword"> const </span>{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                            <span class="keywordflow">return</span> Math::almostEqual(value, u.value);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        }</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#aa7c1f86cd9a1c6a6d02c6ed251f56d08">  138</a></span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#aa7c1f86cd9a1c6a6d02c6ed251f56d08">operator!=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u)<span class="keyword"> const </span>{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == u);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        }</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#ad7d0a14ab68567e3b917d783df57d4bc">  146</a></span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#ad7d0a14ab68567e3b917d783df57d4bc">operator&lt;=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u)<span class="keyword"> const </span>{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            <span class="keywordflow">return</span> value &lt;= u.value;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        }</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#a5cc535353c6a7c0f7b741eddb1eb1328">  154</a></span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a5cc535353c6a7c0f7b741eddb1eb1328">operator&gt;=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u)<span class="keyword"> const </span>{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                            <span class="keywordflow">return</span> value &gt;= u.value;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        }</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#a57861b23767a77366a10f56c28afb081">  162</a></span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a57861b23767a77366a10f56c28afb081">operator&lt;</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u)<span class="keyword"> const </span>{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                            <span class="keywordflow">return</span> value &lt; u.value;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        }</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#a57b0e40e80ebccbe92dec4ddcc688b30">  170</a></span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a57b0e40e80ebccbe92dec4ddcc688b30">operator&gt;</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit</a> <span class="keyword">const</span>&amp; u)<span class="keyword"> const </span>{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                            <span class="keywordflow">return</span> value &gt; u.value;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        }</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_unit.php#aacc9380051d21d7c9a7f2a86b4fbb600">  177</a></span>&#160;                        Utility::String <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#aacc9380051d21d7c9a7f2a86b4fbb600">toString</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                            Utility::String res;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                            res &lt;&lt; value;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                            <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            };</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> M, <span class="keyword">class</span> L, <span class="keyword">class</span> T, <span class="keyword">class</span> A&gt;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a2b8fb6f1524144ced4e30aedf3a21e78">  191</a></span>&#160;            std::ostream&amp; operator &lt;&lt;(std::ostream&amp; stream, Unit&lt;M, L, T, A&gt; <span class="keyword">const</span>&amp; o) {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">return</span> stream &lt;&lt; o.toString();</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class </span>M,  <span class="keyword">class </span>L,  <span class="keyword">class </span>T,  <span class="keyword">class </span>A,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                      <span class="keyword">class </span>M2, <span class="keyword">class </span>L2, <span class="keyword">class </span>T2, <span class="keyword">class </span>A2&gt;</div><div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a6064ccea83f27dc1b204d9fee728dcc6">  203</a></span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;std::ratio_subtract&lt;M, M2&gt;</a>, std::ratio_subtract&lt;L, L2&gt;, std::ratio_subtract&lt;T, T2&gt;, std::ratio_subtract&lt;A, A2&gt;&gt; <a class="code" href="_n_r_e___unit_8hpp.php#a6064ccea83f27dc1b204d9fee728dcc6">operator/</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <span class="keyword">const</span>&amp; u1, <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M2, L2, T2, A2&gt;</a> <span class="keyword">const</span>&amp; u2) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="keywordflow">return</span> Unit&lt;std::ratio_subtract&lt;M, M2&gt;, std::ratio_subtract&lt;L, L2&gt;, std::ratio_subtract&lt;T, T2&gt;, std::ratio_subtract&lt;A, A2&gt;&gt;(u1.<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>() / u2.<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>());</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> M, <span class="keyword">class</span> L, <span class="keyword">class</span> T, <span class="keyword">class</span> A&gt;</div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#ae6faf027b18b5d9f1e61e785a79c3ef4">  214</a></span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;std::ratio_subtract&lt;std::ratio&lt;0&gt;</a>, M&gt;, std::ratio_subtract&lt;std::ratio&lt;0&gt;, L&gt;, std::ratio_subtract&lt;std::ratio&lt;0&gt;, T&gt;, std::ratio_subtract&lt;std::ratio&lt;0&gt;, A&gt;&gt; <a class="code" href="_n_r_e___unit_8hpp.php#a6064ccea83f27dc1b204d9fee728dcc6">operator/</a>(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x, <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keywordflow">return</span> Unit&lt;std::ratio_subtract&lt;std::ratio&lt;0&gt;, M&gt;, std::ratio_subtract&lt;std::ratio&lt;0&gt;, L&gt;, std::ratio_subtract&lt;std::ratio&lt;0&gt;, T&gt;, std::ratio_subtract&lt;std::ratio&lt;0&gt;, A&gt;&gt;(x / u.<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>());</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> M, <span class="keyword">class</span> L, <span class="keyword">class</span> T, <span class="keyword">class</span> A&gt;</div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a5befaa2edb8c9841b177dfaa3c3391de">  225</a></span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <a class="code" href="_n_r_e___unit_8hpp.php#a6064ccea83f27dc1b204d9fee728dcc6">operator/</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <span class="keyword">const</span>&amp; u, <span class="keywordtype">long</span> <span class="keywordtype">double</span> x) {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a>(u.<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>() / x);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class </span>M,  <span class="keyword">class </span>L,  <span class="keyword">class </span>T,  <span class="keyword">class </span>A,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                      <span class="keyword">class </span>M2, <span class="keyword">class </span>L2, <span class="keyword">class </span>T2, <span class="keyword">class </span>A2&gt;</div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a1a70c14272a67ffe60ed4633e14d42cf">  237</a></span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;std::ratio_add&lt;M, M2&gt;</a>, std::ratio_add&lt;L, L2&gt;, std::ratio_add&lt;T, T2&gt;, std::ratio_add&lt;A, A2&gt;&gt; <a class="code" href="_n_r_e___unit_8hpp.php#a1a70c14272a67ffe60ed4633e14d42cf">operator*</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <span class="keyword">const</span>&amp; u1, <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M2, L2, T2, A2&gt;</a> <span class="keyword">const</span>&amp; u2) {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="keywordflow">return</span> Unit&lt;std::ratio_add&lt;M, M2&gt;, std::ratio_add&lt;L, L2&gt;, std::ratio_add&lt;T, T2&gt;, std::ratio_add&lt;A, A2&gt;&gt;(u1.<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>() * u2.<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>());</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> M, <span class="keyword">class</span> L, <span class="keyword">class</span> T, <span class="keyword">class</span> A&gt;</div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a428ac3b6aae104ce9356539367afb028">  248</a></span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <a class="code" href="_n_r_e___unit_8hpp.php#a1a70c14272a67ffe60ed4633e14d42cf">operator*</a>(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x, <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a>(x * u.<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>());</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> M, <span class="keyword">class</span> L, <span class="keyword">class</span> T, <span class="keyword">class</span> A&gt;</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a36a5b957c72bedaa54e2ce7bb2edd20c">  259</a></span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <a class="code" href="_n_r_e___unit_8hpp.php#a1a70c14272a67ffe60ed4633e14d42cf">operator*</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a> <span class="keyword">const</span>&amp; u, <span class="keywordtype">long</span> <span class="keywordtype">double</span> x) {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_unit.php">Unit&lt;M, L, T, A&gt;</a>(u.<a class="code" href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">getValue</a>() * x);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">  264</a></span>&#160;<span class="preprocessor">            #define TYPEDEF_UNIT(M, L, T, A, name) typedef Unit&lt;std::ratio&lt;M&gt;, std::ratio&lt;L&gt;, std::ratio&lt;T&gt;, std::ratio&lt;A&gt;&gt; name</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(1,  0,  0, 0, UMass);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(0,  1,  0, 0, ULength);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(0,  2,  0, 0, UArea);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(0,  3,  0, 0, UVolume);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(0,  0,  1, 0, UTime);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(0,  1, -1, 0, USpeed);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(0,  1, -2, 0, UAcceleration);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(0,  0, -1, 0, UFrequency);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(1,  1, -2, 0, UForce);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(1, -1, -2, 0, UPressure);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <a class="code" href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a>(0,  0,  0, 1, Angle);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            constexpr UMass kilogramme(1.0);                                    </div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            constexpr UMass gramme   = 0.001 * kilogramme;                      </div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            constexpr UMass tonne    = 1000 * kilogramme;                       </div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#acec06de0adb66b1f20a0f101f16f5bad">  293</a></span>&#160;            constexpr ULength <a class="code" href="_n_r_e___unit_8hpp.php#afe75f6d9846149619eab3d8aa167a728">metre</a>(1.0);                                       </div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            constexpr ULength <a class="code" href="_n_r_e___unit_8hpp.php#af40c2aa07be1468a01c7c0b4a29124a6">decimetre</a>  = <a class="code" href="_n_r_e___unit_8hpp.php#afe75f6d9846149619eab3d8aa167a728">metre</a> / 10;                          </div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            constexpr ULength <a class="code" href="_n_r_e___unit_8hpp.php#acdb2ca06bd2ab6778babdd3d518821c8">centimetre</a> = <a class="code" href="_n_r_e___unit_8hpp.php#afe75f6d9846149619eab3d8aa167a728">metre</a> / 100;                         </div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#af40c2aa07be1468a01c7c0b4a29124a6">  296</a></span>&#160;            constexpr ULength <a class="code" href="_n_r_e___unit_8hpp.php#accfd7f608ff7f358492bed2936f07672">millimetre</a> = <a class="code" href="_n_r_e___unit_8hpp.php#afe75f6d9846149619eab3d8aa167a728">metre</a> / 1000;                        </div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#acdb2ca06bd2ab6778babdd3d518821c8">  297</a></span>&#160;            constexpr ULength <a class="code" href="_n_r_e___unit_8hpp.php#a42e33c28232bf195a630470c7172eb8e">kilometre</a>  = 1000 * <a class="code" href="_n_r_e___unit_8hpp.php#afe75f6d9846149619eab3d8aa167a728">metre</a>;                        </div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a42e33c28232bf195a630470c7172eb8e">  299</a></span>&#160;            constexpr UArea <a class="code" href="_n_r_e___unit_8hpp.php#ad05b973d3186aadab5c2b0665025d977">metre2</a>      = <a class="code" href="_n_r_e___unit_8hpp.php#afe75f6d9846149619eab3d8aa167a728">metre</a> * <a class="code" href="_n_r_e___unit_8hpp.php#afe75f6d9846149619eab3d8aa167a728">metre</a>;                        </div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            constexpr UArea <a class="code" href="_n_r_e___unit_8hpp.php#acd542e35f3c11cdf1462fa99879f5a34">decimetre2</a>  = decimetre * decimetre;                </div><div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#ad05b973d3186aadab5c2b0665025d977">  301</a></span>&#160;            constexpr UArea <a class="code" href="_n_r_e___unit_8hpp.php#a5ba3c74436a9b9698fe0ea75cd2dcdac">centimetre2</a> = centimetre * centimetre;              </div><div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#acd542e35f3c11cdf1462fa99879f5a34">  302</a></span>&#160;            constexpr UArea <a class="code" href="_n_r_e___unit_8hpp.php#a0eec62ac5887757cef063fcbb0dcae08">millimetre2</a> = millimetre * millimetre;              </div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a5ba3c74436a9b9698fe0ea75cd2dcdac">  303</a></span>&#160;            constexpr UArea <a class="code" href="_n_r_e___unit_8hpp.php#ac699a97b36fc1b59f7b75c8cd2d88c01">kilometre2</a>  = kilometre * kilometre;                </div><div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#ac699a97b36fc1b59f7b75c8cd2d88c01">  305</a></span>&#160;            constexpr UVolume <a class="code" href="_n_r_e___unit_8hpp.php#acad02e536df2092a42a8d8328dfe07ab">metre3</a>      = metre2 * metre;                     </div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            constexpr UVolume <a class="code" href="_n_r_e___unit_8hpp.php#a1c9da294870a255ba1d988ccbecc61e3">decimetre3</a>  = decimetre2 * decimetre;             </div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#acad02e536df2092a42a8d8328dfe07ab">  307</a></span>&#160;            constexpr UVolume <a class="code" href="_n_r_e___unit_8hpp.php#ad5699fd096585d91c8f9ab96373c5ef5">centimetre3</a> = centimetre2 * centimetre;           </div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a1c9da294870a255ba1d988ccbecc61e3">  308</a></span>&#160;            constexpr UVolume <a class="code" href="_n_r_e___unit_8hpp.php#af6826769863e54d9b32d6e1110159799">millimetre3</a> = millimetre2 * millimetre;           </div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#ad5699fd096585d91c8f9ab96373c5ef5">  309</a></span>&#160;            constexpr UVolume <a class="code" href="_n_r_e___unit_8hpp.php#aad4ff9c023d12f00e5f7eb3fbff21c19">kilometre3</a>  = kilometre2 * kilometre;             </div><div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#af6826769863e54d9b32d6e1110159799">  310</a></span>&#160;            constexpr UVolume <a class="code" href="_n_r_e___unit_8hpp.php#a3e00dda43a261234781abce764c643a4">litre</a>       = decimetre3;                         </div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a3e00dda43a261234781abce764c643a4">  312</a></span>&#160;            constexpr UTime <a class="code" href="_n_r_e___unit_8hpp.php#a16ec151ca984a2d16a9353958ec5b3fb">second</a>(1.0);                                        </div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            constexpr UTime <a class="code" href="_n_r_e___unit_8hpp.php#adee1d5ae4bf7e308a71813755b4f6b58">minute</a>   = 60 * <a class="code" href="_n_r_e___unit_8hpp.php#a16ec151ca984a2d16a9353958ec5b3fb">second</a>;                             </div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            constexpr UTime <a class="code" href="_n_r_e___unit_8hpp.php#a45b36034ad199e91126dc072cc037802">hour</a>     = 60 * minute;                             </div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#adee1d5ae4bf7e308a71813755b4f6b58">  315</a></span>&#160;            constexpr UTime <a class="code" href="_n_r_e___unit_8hpp.php#a55c93552a177e8b1b27920daf369d5b9">day</a>      = 24 * hour;                               </div><div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a55c93552a177e8b1b27920daf369d5b9">  317</a></span>&#160;            constexpr UFrequency <a class="code" href="_n_r_e___unit_8hpp.php#adcd42eb06a6da78054db6cc4db3a48cc">Hz</a>(1.0);                                       </div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            constexpr UAcceleration <a class="code" href="_n_r_e___unit_8hpp.php#a29dc7e852e96f76c42a600615fa8a238">G</a> = 9.80665 * metre / (<a class="code" href="_n_r_e___unit_8hpp.php#a16ec151ca984a2d16a9353958ec5b3fb">second</a> * <a class="code" href="_n_r_e___unit_8hpp.php#a16ec151ca984a2d16a9353958ec5b3fb">second</a>);    </div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            constexpr UForce <a class="code" href="_n_r_e___unit_8hpp.php#a77468077d86c3a77414bcb1af0047604">newton</a>(1.0);                                       </div><div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a29dc7e852e96f76c42a600615fa8a238">  321</a></span>&#160;            constexpr UPressure <a class="code" href="_n_r_e___unit_8hpp.php#a88dc07e3afd9327d7d416e8244cf502c">pascal</a>(1.0);                                    </div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            constexpr ULength <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _mm(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * millimetre; }</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            constexpr ULength <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _cm(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * centimetre; }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            constexpr ULength <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>  _m(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * metre; }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            constexpr ULength <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _km(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * kilometre; }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            constexpr ULength <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _mm(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * millimetre; }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            constexpr ULength <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _cm(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * centimetre; }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            constexpr ULength <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>  _m(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * metre; }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            constexpr ULength <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _km(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * kilometre; }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            constexpr USpeed <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _kmph(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * kilometre / hour; }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            constexpr USpeed <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _kmph(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * kilometre / hour; }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            constexpr UFrequency <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _Hz(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> UFrequency(x); }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            constexpr UFrequency <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _Hz(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> UFrequency(static_cast &lt;double&gt; (x)); }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            constexpr UTime <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>   _s(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> UTime(x); }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            constexpr UTime <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _min(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * minute; }</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            constexpr UTime <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>   _h(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * hour; }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            constexpr UTime <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _day(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * day; }</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            constexpr UTime <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>   _s(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> UTime(static_cast &lt;double&gt; (x)); }</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            constexpr UTime <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _min(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * minute; }</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            constexpr UTime <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>   _h(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * hour; }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            constexpr UTime <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _day(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * day; }</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            constexpr UMass <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _kg(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> UMass(x); }</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            constexpr UMass <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>  _g(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * gramme; }</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            constexpr UMass <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>  _t(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * tonne; }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            constexpr UMass <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _kg(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> UMass(static_cast &lt;double&gt; (x)); }</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            constexpr UMass <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>  _g(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * gramme; }</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            constexpr UMass <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span>  _t(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * tonne; }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            constexpr UAcceleration <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _mps2(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> UAcceleration(x); }</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            constexpr UAcceleration <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _mps2(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> UAcceleration(static_cast &lt;double&gt; (x)); }</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            constexpr UAcceleration <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _G(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * G; }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            constexpr UAcceleration <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _G(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * G; }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            constexpr UForce <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _N(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> UForce(x); }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            constexpr UForce <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _N(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> UForce(static_cast &lt;double&gt; (x)); }</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            constexpr UPressure <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _Pa(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> UPressure(x); }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            constexpr UPressure <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _Pa(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> UPressure(static_cast &lt;double&gt; (x)); }</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            constexpr <span class="keywordtype">long</span> <span class="keywordtype">double</span> <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _pi(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * 3.1415926535897932384626433832795; }</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            constexpr <span class="keywordtype">long</span> <span class="keywordtype">double</span> <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _pi(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * 3.1415926535897932384626433832795; }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#af70185d033bbea0c45e8ac78ae39d815">  540</a></span>&#160;            constexpr Angle <a class="code" href="_n_r_e___unit_8hpp.php#a2945f93aed6cefab91a649215d372e52">radian</a>(1.0);                                        </div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            constexpr Angle <a class="code" href="_n_r_e___unit_8hpp.php#ae085bcfd9859bc503e20ba6686871c2c">degree</a> = (2_pi / 360.0f) * radian;                  </div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            constexpr Angle <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _rad(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> Angle(x); }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            constexpr Angle <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _rad(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> Angle(static_cast &lt;double&gt; (x)); }</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            constexpr Angle <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _deg(<span class="keywordtype">long</span> <span class="keywordtype">double</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * degree; }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            constexpr Angle <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _deg(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> x) { <span class="keywordflow">return</span> static_cast &lt;<span class="keywordtype">double</span>&gt; (x) * degree; }</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="_n_r_e___unit_8hpp.php#a0baa541577ab6bbbfb06f712745ac447">sin</a>(Angle <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                <span class="keywordflow">return</span> std::sin(u.getValue());</div><div class="line"><a name="l00575"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a0baa541577ab6bbbfb06f712745ac447">  575</a></span>&#160;            }</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="_n_r_e___unit_8hpp.php#aa00b565e2f9d85446eddeeeffc8bd170">cos</a>(Angle <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                <span class="keywordflow">return</span> std::cos(u.getValue());</div><div class="line"><a name="l00584"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#aa00b565e2f9d85446eddeeeffc8bd170">  584</a></span>&#160;            }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="_n_r_e___unit_8hpp.php#a4ee84be9933a6d9f8c1154955e0b4262">tan</a>(Angle <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                <span class="keywordflow">return</span> std::tan(u.getValue());</div><div class="line"><a name="l00593"></a><span class="lineno"><a class="line" href="_n_r_e___unit_8hpp.php#a4ee84be9933a6d9f8c1154955e0b4262">  593</a></span>&#160;            }</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        }</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    }</div><div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_af70cf71def75fa1c8c6daa7a083ec8e3"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#af70cf71def75fa1c8c6daa7a083ec8e3">NRE::Math::Unit::operator+=</a></div><div class="ttdeci">constexpr Unit const &amp; operator+=(Unit const &amp;u)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:85</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_a728734518d0ef3c6fbe39e8093d44287"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#a728734518d0ef3c6fbe39e8093d44287">NRE::Math::Unit::sqrt</a></div><div class="ttdeci">constexpr Unit&lt; std::ratio_divide&lt; M, std::ratio&lt; 2 &gt; &gt;, std::ratio_divide&lt; L, std::ratio&lt; 2 &gt; &gt;, std::ratio_divide&lt; T, std::ratio&lt; 2 &gt; &gt;, std::ratio_divide&lt; A, std::ratio&lt; 2 &gt; &gt; &gt; sqrt()</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:75</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a77468077d86c3a77414bcb1af0047604"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a77468077d86c3a77414bcb1af0047604">NRE::Math::newton</a></div><div class="ttdeci">constexpr UForce newton(1.0)</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_a57861b23767a77366a10f56c28afb081"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#a57861b23767a77366a10f56c28afb081">NRE::Math::Unit::operator&lt;</a></div><div class="ttdeci">constexpr bool operator&lt;(Unit const &amp;u) const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:162</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a16b0c62594edf53a7c79c297e9b7ff7e"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a16b0c62594edf53a7c79c297e9b7ff7e">TYPEDEF_UNIT</a></div><div class="ttdeci">#define TYPEDEF_UNIT(M, L, T, A, name)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:264</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_af36c98e1e59edd06148aced23fd0b347"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#af36c98e1e59edd06148aced23fd0b347">NRE::Math::Unit::operator-=</a></div><div class="ttdeci">constexpr Unit const &amp; operator-=(Unit const &amp;u)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:94</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_aa6f50b4134b5da67ed498f0ef167b602"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#aa6f50b4134b5da67ed498f0ef167b602">NRE::Math::Unit::Unit</a></div><div class="ttdeci">constexpr Unit(long double val)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:57</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a88dc07e3afd9327d7d416e8244cf502c"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a88dc07e3afd9327d7d416e8244cf502c">NRE::Math::pascal</a></div><div class="ttdeci">constexpr UPressure pascal(1.0)</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a1a70c14272a67ffe60ed4633e14d42cf"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a1a70c14272a67ffe60ed4633e14d42cf">NRE::Math::operator*</a></div><div class="ttdeci">constexpr Unit&lt; std::ratio_add&lt; M, M2 &gt;, std::ratio_add&lt; L, L2 &gt;, std::ratio_add&lt; T, T2 &gt;, std::ratio_add&lt; A, A2 &gt; &gt; operator*(Unit&lt; M, L, T, A &gt; const &amp;u1, Unit&lt; M2, L2, T2, A2 &gt; const &amp;u2)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:237</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_aa7c1f86cd9a1c6a6d02c6ed251f56d08"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#aa7c1f86cd9a1c6a6d02c6ed251f56d08">NRE::Math::Unit::operator!=</a></div><div class="ttdeci">constexpr bool operator!=(Unit const &amp;u) const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:138</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a16ec151ca984a2d16a9353958ec5b3fb"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a16ec151ca984a2d16a9353958ec5b3fb">NRE::Math::second</a></div><div class="ttdeci">constexpr UTime second(1.0)</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a3e00dda43a261234781abce764c643a4"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a3e00dda43a261234781abce764c643a4">NRE::Math::litre</a></div><div class="ttdeci">constexpr UVolume litre</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:312</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_accfd7f608ff7f358492bed2936f07672"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#accfd7f608ff7f358492bed2936f07672">NRE::Math::millimetre</a></div><div class="ttdeci">constexpr ULength millimetre</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:298</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_a3e285181e6cbf15a0c03235062bfb3a0"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#a3e285181e6cbf15a0c03235062bfb3a0">NRE::Math::Unit::operator==</a></div><div class="ttdeci">constexpr bool operator==(Unit const &amp;u) const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:130</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_a39807af96b26a877e11fd82705f94676"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#a39807af96b26a877e11fd82705f94676">NRE::Math::Unit::operator-</a></div><div class="ttdeci">constexpr Unit operator-(Unit const &amp;u) const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:120</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a1c9da294870a255ba1d988ccbecc61e3"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a1c9da294870a255ba1d988ccbecc61e3">NRE::Math::decimetre3</a></div><div class="ttdeci">constexpr UVolume decimetre3</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:308</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a0baa541577ab6bbbfb06f712745ac447"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a0baa541577ab6bbbfb06f712745ac447">NRE::Math::sin</a></div><div class="ttdeci">double sin(Angle const &amp;u)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:575</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_a571c89a1d60706d1a5d7923feecf5a39"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#a571c89a1d60706d1a5d7923feecf5a39">NRE::Math::Unit::operator+</a></div><div class="ttdeci">constexpr Unit operator+(Unit const &amp;u) const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:112</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_af40c2aa07be1468a01c7c0b4a29124a6"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#af40c2aa07be1468a01c7c0b4a29124a6">NRE::Math::decimetre</a></div><div class="ttdeci">constexpr ULength decimetre</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:296</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_a5cc535353c6a7c0f7b741eddb1eb1328"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#a5cc535353c6a7c0f7b741eddb1eb1328">NRE::Math::Unit::operator&gt;=</a></div><div class="ttdeci">constexpr bool operator&gt;=(Unit const &amp;u) const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:154</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_ad7d0a14ab68567e3b917d783df57d4bc"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#ad7d0a14ab68567e3b917d783df57d4bc">NRE::Math::Unit::operator&lt;=</a></div><div class="ttdeci">constexpr bool operator&lt;=(Unit const &amp;u) const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:146</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a0eec62ac5887757cef063fcbb0dcae08"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a0eec62ac5887757cef063fcbb0dcae08">NRE::Math::millimetre2</a></div><div class="ttdeci">constexpr UArea millimetre2</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:304</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_adcd42eb06a6da78054db6cc4db3a48cc"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#adcd42eb06a6da78054db6cc4db3a48cc">NRE::Math::Hz</a></div><div class="ttdeci">constexpr UFrequency Hz(1.0)</div></div>
<div class="ttc" id="namespace_math_php"><div class="ttname"><a href="namespace_math.php">Math</a></div><div class="ttdoc">Math&amp;#39;s API. </div></div>
<div class="ttc" id="_math_2_n_r_e___math_8hpp_php"><div class="ttname"><a href="_math_2_n_r_e___math_8hpp.php">NRE_Math.hpp</a></div><div class="ttdoc">Implementation of Math&amp;#39;s API&amp;#39;s function. </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_a57b0e40e80ebccbe92dec4ddcc688b30"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#a57b0e40e80ebccbe92dec4ddcc688b30">NRE::Math::Unit::operator&gt;</a></div><div class="ttdeci">constexpr bool operator&gt;(Unit const &amp;u) const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:170</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a29dc7e852e96f76c42a600615fa8a238"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a29dc7e852e96f76c42a600615fa8a238">NRE::Math::G</a></div><div class="ttdeci">constexpr UAcceleration G</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:321</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_ad05b973d3186aadab5c2b0665025d977"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#ad05b973d3186aadab5c2b0665025d977">NRE::Math::metre2</a></div><div class="ttdeci">constexpr UArea metre2</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:301</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_acdb2ca06bd2ab6778babdd3d518821c8"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#acdb2ca06bd2ab6778babdd3d518821c8">NRE::Math::centimetre</a></div><div class="ttdeci">constexpr ULength centimetre</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:297</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_acde0194bb69bc8d6bebf8ceb0b142426"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#acde0194bb69bc8d6bebf8ceb0b142426">NRE::Math::Unit::Unit</a></div><div class="ttdeci">constexpr Unit()</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:45</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_aa00b565e2f9d85446eddeeeffc8bd170"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#aa00b565e2f9d85446eddeeeffc8bd170">NRE::Math::cos</a></div><div class="ttdeci">double cos(Angle const &amp;u)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:584</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_acad02e536df2092a42a8d8328dfe07ab"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#acad02e536df2092a42a8d8328dfe07ab">NRE::Math::metre3</a></div><div class="ttdeci">constexpr UVolume metre3</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:307</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_adee1d5ae4bf7e308a71813755b4f6b58"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#adee1d5ae4bf7e308a71813755b4f6b58">NRE::Math::minute</a></div><div class="ttdeci">constexpr UTime minute</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:315</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a55c93552a177e8b1b27920daf369d5b9"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a55c93552a177e8b1b27920daf369d5b9">NRE::Math::day</a></div><div class="ttdeci">constexpr UTime day</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:317</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_ad5699fd096585d91c8f9ab96373c5ef5"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#ad5699fd096585d91c8f9ab96373c5ef5">NRE::Math::centimetre3</a></div><div class="ttdeci">constexpr UVolume centimetre3</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:309</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php">NRE::Math::Unit</a></div><div class="ttdoc">Used to define clear physical unit. </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:36</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_acd542e35f3c11cdf1462fa99879f5a34"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#acd542e35f3c11cdf1462fa99879f5a34">NRE::Math::decimetre2</a></div><div class="ttdeci">constexpr UArea decimetre2</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:302</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a5ba3c74436a9b9698fe0ea75cd2dcdac"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a5ba3c74436a9b9698fe0ea75cd2dcdac">NRE::Math::centimetre2</a></div><div class="ttdeci">constexpr UArea centimetre2</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:303</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_ad35ea8e9a0c033c4a7dbb5ed85c697d5"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#ad35ea8e9a0c033c4a7dbb5ed85c697d5">NRE::Math::Unit::Unit</a></div><div class="ttdeci">constexpr Unit(double val)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:51</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_aacc9380051d21d7c9a7f2a86b4fbb600"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#aacc9380051d21d7c9a7f2a86b4fbb600">NRE::Math::Unit::toString</a></div><div class="ttdeci">Utility::String toString() const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:177</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div><div class="ttdef"><b>Definition:</b> NRE_BezierCurve3D.cpp:14</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_aad4ff9c023d12f00e5f7eb3fbff21c19"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#aad4ff9c023d12f00e5f7eb3fbff21c19">NRE::Math::kilometre3</a></div><div class="ttdeci">constexpr UVolume kilometre3</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:311</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_af6826769863e54d9b32d6e1110159799"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#af6826769863e54d9b32d6e1110159799">NRE::Math::millimetre3</a></div><div class="ttdeci">constexpr UVolume millimetre3</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:310</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_ac699a97b36fc1b59f7b75c8cd2d88c01"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#ac699a97b36fc1b59f7b75c8cd2d88c01">NRE::Math::kilometre2</a></div><div class="ttdeci">constexpr UArea kilometre2</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:305</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a4ee84be9933a6d9f8c1154955e0b4262"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a4ee84be9933a6d9f8c1154955e0b4262">NRE::Math::tan</a></div><div class="ttdeci">double tan(Angle const &amp;u)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:593</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a42e33c28232bf195a630470c7172eb8e"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a42e33c28232bf195a630470c7172eb8e">NRE::Math::kilometre</a></div><div class="ttdeci">constexpr ULength kilometre</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:299</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_a8ef43f0978c973892ec6ee475ebd1d8d"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#a8ef43f0978c973892ec6ee475ebd1d8d">NRE::Math::Unit::getValue</a></div><div class="ttdeci">constexpr double getValue() const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:65</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a6064ccea83f27dc1b204d9fee728dcc6"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a6064ccea83f27dc1b204d9fee728dcc6">NRE::Math::operator/</a></div><div class="ttdeci">constexpr Unit&lt; std::ratio_subtract&lt; M, M2 &gt;, std::ratio_subtract&lt; L, L2 &gt;, std::ratio_subtract&lt; T, T2 &gt;, std::ratio_subtract&lt; A, A2 &gt; &gt; operator/(Unit&lt; M, L, T, A &gt; const &amp;u1, Unit&lt; M2, L2, T2, A2 &gt; const &amp;u2)</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:203</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_afe75f6d9846149619eab3d8aa167a728"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#afe75f6d9846149619eab3d8aa167a728">NRE::Math::metre</a></div><div class="ttdeci">constexpr ULength metre(1.0)</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a45b36034ad199e91126dc072cc037802"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a45b36034ad199e91126dc072cc037802">NRE::Math::hour</a></div><div class="ttdeci">constexpr UTime hour</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:316</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_unit_php_ad395b12f20018095c4ddba74531a4f22"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_unit.php#ad395b12f20018095c4ddba74531a4f22">NRE::Math::Unit::operator-</a></div><div class="ttdeci">constexpr Unit operator-() const </div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:102</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_ae085bcfd9859bc503e20ba6686871c2c"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#ae085bcfd9859bc503e20ba6686871c2c">NRE::Math::degree</a></div><div class="ttdeci">constexpr Angle degree</div><div class="ttdef"><b>Definition:</b> NRE_Unit.hpp:543</div></div>
<div class="ttc" id="_n_r_e___unit_8hpp_php_a2945f93aed6cefab91a649215d372e52"><div class="ttname"><a href="_n_r_e___unit_8hpp.php#a2945f93aed6cefab91a649215d372e52">NRE::Math::radian</a></div><div class="ttdeci">constexpr Angle radian(1.0)</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
