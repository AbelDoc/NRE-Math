<!-- HTML header for doxygen 1.8.8-->
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <!-- For Mobile Devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
        <meta name="generator" content="Doxygen 1.8.11"/>
        <script type="text/javascript" src="../../js/jquery-2.1.1.min.js"></script>
        <title>NRE-Math: /mnt/c/Users/abell/Documents/GitHub/NRE-Math/src/Math/Vector/3D/NRE_Vector3D.hpp Source File</title>
        <!--<link href="tabs.css" rel="stylesheet" type="text/css"/>-->
        <script type="text/javascript" src="dynsections.js"></script>
        <link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <link href='https://fonts.googleapis.com/css?family=Roboto+Slab' rel='stylesheet' type='text/css'>
        <?php
            include '../../php/navigation.php';
            if (!isset($_COOKIE["theme"]) || $_COOKIE["theme"] == "dark") {
                echo '<link href="../../css/dark/bootstrap.css" rel="stylesheet">';
            } else {
                echo '<link href="../../css/light/bootstrap.css" rel="stylesheet">';
            }
        ?>
        <script src="../../js/bootstrap.min.js"></script>
        <script type="text/javascript" src="doxy-boot.js"></script>
    </head>
    <body>
        <div class="container-fluid">
            <header class="page-header">
                <a href="../../../index.php">
                    <img src="../../img/Logo.png" class="logo img-responsive"/>
                </a>
            </header>
            <?php addNavigationBarInl(false); ?>
            <div id="top" class="row"><!-- do not remove this div, it is closed by doxygen! -->
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
      <li><a href="globals.php"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.php">src</a></li><li class="navelem"><a class="el" href="dir_3813464283bee2267f39dcf080a84d74.php">Math</a></li><li class="navelem"><a class="el" href="dir_4005e686f12f80d4c04432a698da12f8.php">Vector</a></li><li class="navelem"><a class="el" href="dir_3e033f12937dd268a3f1dbce87ebdfd5.php">3D</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NRE_Vector3D.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_r_e___vector3_d_8hpp.php">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">     #pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">     #include &lt;Utility/String/NRE_String.hpp&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">     #include &lt;Utility/Interfaces/Stringable/NRE_Stringable.hpp&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">     #include &quot;../../NRE_Math.hpp&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespace_n_r_e.php">NRE</a> {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keyword">namespace </span><a class="code" href="namespace_math.php">Math</a> {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">class</span>&gt; <span class="keyword">class </span>Vector2D;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            <span class="keyword">template</span>&lt;<span class="keyword">class</span>&gt; <span class="keyword">class </span>Vector4D;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keyword">class </span>Vector3D : <span class="keyword">public</span> Utility::Stringable&lt;Vector3D&lt;T&gt;&gt; {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                static_assert(ArithmeticCheckerV&lt;T&gt;); </div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                <span class="keyword">private</span> :   <span class="comment">//Fields</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                    T x = 0;    </div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                    T y = 0;    </div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                    T z = 0;    </div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                <span class="keyword">public</span> :    <span class="comment">// Methods</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                    <span class="comment">//## Constructor ##//</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a371d575b095e31b96a8f6109dd7f99fd">Vector3D</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> L, <span class="keyword">class</span> N, <span class="keyword">typename</span> = UseIfArithmetic&lt;K, L, N&gt;&gt;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a786677d4789865f8460951e43f57b594">   56</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a786677d4789865f8460951e43f57b594">Vector3D</a>(K nX, L nY, N nZ) : x(static_cast &lt;T&gt; (nX)), y(static_cast &lt;T&gt; (nY)), z(static_cast &lt;T&gt; (nZ)) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a107185429f2da5e17c366214a0625099">   63</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a107185429f2da5e17c366214a0625099">Vector3D</a>(K <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae4d3f94ce9af59718e47e436818b3274">value</a>) : Vector3D(value, value, value) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                        }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a371d575b095e31b96a8f6109dd7f99fd">Vector3D</a>(std::initializer_list&lt;T&gt; list);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                    <span class="comment">//## Copy-Constructor ##//</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a371d575b095e31b96a8f6109dd7f99fd">Vector3D</a>(Vector3D <span class="keyword">const</span>&amp; u) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="comment">//## Move-Constructor ##//</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span>                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a371d575b095e31b96a8f6109dd7f99fd">Vector3D</a>(Vector3D &amp;&amp; u) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="comment">//## Convertor ##//</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a371d575b095e31b96a8f6109dd7f99fd">Vector3D</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a371d575b095e31b96a8f6109dd7f99fd">Vector3D</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a371d575b095e31b96a8f6109dd7f99fd">Vector3D</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector4_d.php">Vector4D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> L, <span class="keyword">typename</span> = UseIfArithmetic&lt;L&gt;&gt;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a11a81a1b25edb47197c1156df184b9f6">  110</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a11a81a1b25edb47197c1156df184b9f6">Vector3D</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u, L nZ) : Vector3D(u.<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a6f38989cfecc5987fdda4126ecdc17e2">getX</a>(), u.<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#aff90194d75579e485e2dd4d66106f506">getY</a>(), nZ) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    <span class="comment">//## Deconstructor ##//</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span>                        <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#aae907186694f911c888e2c5d20ef51c5">~Vector3D</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="comment">//## Getter ##//</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span>                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a6f38989cfecc5987fdda4126ecdc17e2">getX</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#aff90194d75579e485e2dd4d66106f506">getY</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a0fe3d36bfc1fc6a84d5d1d54d94ba291">getZ</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ab47f9b48d3b91afd6bb0b481dc54f36b">getR</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae2b0e961bc8147c9a12f415c9efbcb94">getG</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a5feca9230bad1d8a8004abcb161e9ac9">getB</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    <span class="comment">//## Setter ##//</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">  151</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(K nX) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                            x = static_cast &lt;T&gt; (nX);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">  159</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(K nY) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                            y = static_cast &lt;T&gt; (nY);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">  167</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(K nZ) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                            z = static_cast &lt;T&gt; (nZ);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#af44751ca7404fc3bd378399d6099dc02">  175</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#af44751ca7404fc3bd378399d6099dc02">setR</a>(K r) {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(r);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a559830e269cf5f86440bf964d8fa7646">  183</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a559830e269cf5f86440bf964d8fa7646">setG</a>(K g) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(g);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a73c4e134df19d879347b655a0a271c82">  191</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a73c4e134df19d879347b655a0a271c82">setB</a>(K b) {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(b);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> L, <span class="keyword">class</span> N, <span class="keyword">typename</span> = UseIfArithmetic&lt;K, L, N&gt;&gt;</div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ad047951c6b0dd5fafaeb002d12572187">  201</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ad047951c6b0dd5fafaeb002d12572187">setCoord</a>(K nX, L nY, N nZ) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(nX);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(nY);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(nZ);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> L, <span class="keyword">typename</span> = UseIfArithmetic&lt;L&gt;&gt;</div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a36ef34aa4181dac6694927a97529573f">  212</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a36ef34aa4181dac6694927a97529573f">setCoord</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php">Vector2D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u, L nZ) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(u.<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#a3a2394b397491fcd9493a1108f30109c">getX</a>());</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(u.<a class="code" href="class_n_r_e_1_1_math_1_1_vector2_d.php#acab4df35acef9a21408882db7b0dea7a">getY</a>());</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(nZ);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">class</span> L, <span class="keyword">class</span> N, <span class="keyword">typename</span> = UseIfArithmetic&lt;K, L, N&gt;&gt;</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a10b1cab637eb39d3155a3a3f2a44fb0a">  224</a></span>&#160;                        constexpr <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a10b1cab637eb39d3155a3a3f2a44fb0a">setRGB</a>(K r, L g, N b) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#af44751ca7404fc3bd378399d6099dc02">setR</a>(r);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a559830e269cf5f86440bf964d8fa7646">setG</a>(g);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a73c4e134df19d879347b655a0a271c82">setB</a>(b);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    <span class="comment">//## Methods ##//</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"></span>                        <span class="keywordtype">long</span> <span class="keywordtype">double</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a911ad22261fdd1446695c2e5ea3002c4">norm</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        constexpr T <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a619848cfd51e30ff1a48aa77dbe5866f">normSquared</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        <span class="keywordtype">long</span> <span class="keywordtype">double</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a52ce9e19c29c901cdeb1979fad1782c3">distance</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; v) <span class="keyword">const</span>;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                        constexpr std::common_type_t&lt;T, K&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a963aff18cce45fd0a62513c1c7075a99">distanceSquared</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; v) <span class="keyword">const</span>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac9fe609c2abdac54ac5f0e31d6fd6f92">normalize</a>();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a7d3138dd0c8a4c6f478f0f49c793a463">  259</a></span>&#160;                        <span class="keywordtype">void</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a7d3138dd0c8a4c6f478f0f49c793a463">limit</a>(K max) {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                            <span class="keyword">auto</span> n = <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a911ad22261fdd1446695c2e5ea3002c4">norm</a>();</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                            <span class="keywordflow">if</span> (n &gt; max) {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac9fe609c2abdac54ac5f0e31d6fd6f92">normalize</a>();</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                            }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a35a304d5edbc0f7dfa2efbda3d8a692b">  271</a></span>&#160;                        Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a35a304d5edbc0f7dfa2efbda3d8a692b">pow</a>(K p) {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(std::pow(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x), static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (p)));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(std::pow(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y), static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (p)));</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(std::pow(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (z), static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (p)));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a35a304d5edbc0f7dfa2efbda3d8a692b">pow</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; p);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                        constexpr <span class="keyword">const</span> T* <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae4d3f94ce9af59718e47e436818b3274">value</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <span class="comment">//## Access Operator ##//</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"></span>                        constexpr T&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ad76f1ad788cb5325f750840a90f34d76">operator []</a>(std::size_t index);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                        constexpr T <span class="keyword">const</span>&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ad76f1ad788cb5325f750840a90f34d76">operator []</a>(std::size_t index) <span class="keyword">const</span>;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <span class="comment">//## Assignment Operator ##//</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"></span>                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac21edc42172ee1d52d282f1f3d6b7bbe">operator =</a>(Vector3D <span class="keyword">const</span>&amp; u) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac21edc42172ee1d52d282f1f3d6b7bbe">operator =</a>(Vector3D &amp;&amp; u) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac21edc42172ee1d52d282f1f3d6b7bbe">operator =</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac21edc42172ee1d52d282f1f3d6b7bbe">operator =</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> &amp;&amp; u);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    <span class="comment">//## Shortcut Operator ##//</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00340"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a0c588c999b3c31894ae504d3de036d58">  340</a></span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a0c588c999b3c31894ae504d3de036d58">operator +=</a>(K k) {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x) + static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y) + static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (z) + static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                        }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a0c588c999b3c31894ae504d3de036d58">operator +=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a137334a06c6072edacb7eeebe620313a">  359</a></span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a137334a06c6072edacb7eeebe620313a">operator -=</a>(K k) {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x) - static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y) - static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (z) - static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                        }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a137334a06c6072edacb7eeebe620313a">operator -=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#af5a18d96daff9c1c954e0d2cb21257d2">  378</a></span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#af5a18d96daff9c1c954e0d2cb21257d2">operator *=</a>(K k) {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x) * static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y) * static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (z) * static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                        }</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#af5a18d96daff9c1c954e0d2cb21257d2">operator *=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a02ec733167058ab72a7806a5af743086">  397</a></span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a02ec733167058ab72a7806a5af743086">operator /=</a>(K k) {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">setX</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (x) / static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">setY</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (y) / static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">setZ</a>(static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (z) / static_cast &lt;std::common_type_t&lt;T, K&gt;&gt; (k));</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                        }</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a02ec733167058ab72a7806a5af743086">operator /=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                        constexpr std::common_type_t&lt;T, K&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a43574553388ccd5d39bb216dfcb704fb">operator |=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                        constexpr Vector3D&amp; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a01aed130e1ad18e18dacba460ad08c4e">operator ^=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                    <span class="comment">//## Arithmetic Operator ##//</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2e7434c59ba36ba1557db4a8acb511fa">  432</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2e7434c59ba36ba1557db4a8acb511fa">operator +</a>(K k)<span class="keyword"> const </span>{</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(*this) += k;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                        }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2e7434c59ba36ba1557db4a8acb511fa">operator +</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ab3a65b1599730fb0a6d8ffd69fe84fde">  448</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#aeaeea935aeae653978b411b673a7dddd">operator -</a>(K k)<span class="keyword"> const </span>{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(*this) -= k;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                        }</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#aeaeea935aeae653978b411b673a7dddd">operator -</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                        constexpr Vector3D <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#aeaeea935aeae653978b411b673a7dddd">operator -</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00469"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2f6687ed49bd761fdbf890918e61884a">  469</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2f6687ed49bd761fdbf890918e61884a">operator *</a>(K k)<span class="keyword"> const </span>{</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(*this) *= k;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                        }</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2f6687ed49bd761fdbf890918e61884a">operator *</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00485"></a><span class="lineno"><a class="line" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a1b14d863cd2a9bf67610c00a70e4e06d">  485</a></span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a1b14d863cd2a9bf67610c00a70e4e06d">operator /</a>(K k)<span class="keyword"> const </span>{</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                            <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(*this) /= k;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                        }</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a1b14d863cd2a9bf67610c00a70e4e06d">operator /</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                        constexpr std::common_type_t&lt;T, K&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a8e5b7118ce32aee7c861c12dd89d1b2a">operator |</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                        constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a7fc5f7838bc0a950fa32fcc3c8a2370f">operator ^</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                    <span class="comment">//## Comparison Operator ##//</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment"></span>                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae5bbc25888de859dd937a9ae6ac41f2c">operator ==</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a99ac58cea6e9a107577c8e488e2a6924">operator !=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                        constexpr <span class="keywordtype">bool</span> operator &lt;(Vector3D&lt;K&gt; <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#aa7a795b5f077419528494432e0e6f2ed">operator &gt;</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        constexpr <span class="keywordtype">bool</span> operator &lt;=(Vector3D&lt;K&gt; <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                        <span class="keyword">template</span> &lt;<span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                        constexpr <span class="keywordtype">bool</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a45e413f62b799ee6aefed553e7f59802">operator &gt;=</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; u) <span class="keyword">const</span>;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                    <span class="comment">//## Stream Operator ##//</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment"></span>                        Utility::String <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a55c5e2d792fa7364ab98dfb6f7d7ce11">toString</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            };</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    </div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00569"></a><span class="lineno"><a class="line" href="_n_r_e___vector3_d_8hpp.php#aee625157cfd0848ae78a665f5a4ef8f5">  569</a></span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2f6687ed49bd761fdbf890918e61884a">operator *</a>(K k, <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u) {</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                <span class="keywordflow">return</span> u * k;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            }</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;T&gt;</a> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac9fe609c2abdac54ac5f0e31d6fd6f92">normalize</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K, <span class="keyword">typename</span> = UseIfArithmetic&lt;K&gt;&gt;</div><div class="line"><a name="l00586"></a><span class="lineno"><a class="line" href="_n_r_e___vector3_d_8hpp.php#ad8033cf629cc5c703ed60fc23c803536">  586</a></span>&#160;            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a35a304d5edbc0f7dfa2efbda3d8a692b">pow</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u, K k) {</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt;(u).<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a35a304d5edbc0f7dfa2efbda3d8a692b">pow</a>(k);</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            }</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a35a304d5edbc0f7dfa2efbda3d8a692b">pow</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u, <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; p);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            constexpr <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;std::common_type_t&lt;T, K&gt;</a>&gt; <a class="code" href="_n_r_e___vector2_d_8hpp.php#a94f06e0023c567d982fc8e4238366987">reflect</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;T&gt;</a> <span class="keyword">const</span>&amp; u, <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;K&gt;</a> <span class="keyword">const</span>&amp; n);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    </div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00608"></a><span class="lineno"><a class="line" href="_n_r_e___vector3_d_8hpp.php#a448aee64e4baef60491b182208657c3d">  608</a></span>&#160;            <span class="keyword">using</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Point3D</a> = <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">Vector3D&lt;T&gt;</a>;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    }</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keyword">namespace </span><a class="code" href="namespacestd.php">std</a> {</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> K&gt;</div><div class="line"><a name="l00622"></a><span class="lineno"><a class="line" href="structstd_1_1common__type_3_01_n_r_e_1_1_math_1_1_vector3_d_3_01_t_01_4_00_01_n_r_e_1_1_math_1_1_vector3_d_3_01_k_01_4_01_4.php">  622</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="classcommon__type.php">common_type</a>&lt;<a class="code" href="namespace_n_r_e.php">NRE</a>::Math::Vector3D&lt;T&gt;, <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">NRE::Math::Vector3D</a>&lt;K&gt;&gt; {</div><div class="line"><a name="l00624"></a><span class="lineno"><a class="line" href="structstd_1_1common__type_3_01_n_r_e_1_1_math_1_1_vector3_d_3_01_t_01_4_00_01_n_r_e_1_1_math_1_1_vector3_d_3_01_k_01_4_01_4.php#ae2ba37ef510f18f89d9d8629ced90fc5">  624</a></span>&#160;            <span class="keyword">using</span> <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">type</a> = <a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">NRE::Math::Vector3D&lt;common_type_t&lt;T, K&gt;</a>&gt;;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        };</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00631"></a><span class="lineno"><a class="line" href="classstd_1_1hash_3_01_n_r_e_1_1_math_1_1_vector3_d_3_01float_01_4_01_4.php">  631</a></span>&#160;        <span class="keyword">class </span><a class="code" href="classhash.php">hash</a>&lt;<a class="code" href="namespace_n_r_e.php">NRE</a>::Math::Vector3D&lt;float&gt;&gt; {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            <span class="keyword">public</span>:</div><div class="line"><a name="l00638"></a><span class="lineno"><a class="line" href="classstd_1_1hash_3_01_n_r_e_1_1_math_1_1_vector3_d_3_01float_01_4_01_4.php#a215f5b8549164ea981879fd1b0c0e2e3">  638</a></span>&#160;                <span class="keywordtype">size_t</span> <a class="code" href="classstd_1_1hash_3_01_n_r_e_1_1_math_1_1_vector3_d_3_01float_01_4_01_4.php#a215f5b8549164ea981879fd1b0c0e2e3">operator()</a>(<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php">NRE::Math::Vector3D&lt;float&gt;</a> <span class="keyword">const</span>&amp; p)<span class="keyword"> const </span>{</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> keep     = 21;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> hashSize = <span class="keyword">sizeof</span>(size_t) * 8;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    <span class="keywordtype">float</span> x = p.<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a6f38989cfecc5987fdda4126ecdc17e2">getX</a>();</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                    <span class="keywordtype">float</span> y = p.<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#aff90194d75579e485e2dd4d66106f506">getY</a>();</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                    <span class="keywordtype">float</span> z = p.<a class="code" href="class_n_r_e_1_1_math_1_1_vector3_d.php#a0fe3d36bfc1fc6a84d5d1d54d94ba291">getZ</a>();</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    <span class="keywordtype">size_t</span> iX, iY, iZ;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                    memcpy(&amp;iX, &amp;x, <span class="keyword">sizeof</span>(x));</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                    iX &lt;&lt;= hashSize - keep;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    iX &amp;= 0xFFFFF80000000000;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    memcpy(&amp;iY, &amp;y, <span class="keyword">sizeof</span>(y));</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                    iY &lt;&lt;= hashSize - (keep * 2);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                    iY &amp;= 0x000007FFFFC00000;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                    memcpy(&amp;iZ, &amp;z, <span class="keyword">sizeof</span>(z));</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                    iZ &lt;&lt;= hashSize - (keep * 3);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                    iZ &amp;= 0x00000000003FFFFE;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                    <span class="keywordflow">return</span> iX + iY + iZ;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                }</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        };</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="preprocessor">    #include &quot;NRE_Vector3D.tpp&quot;</span></div><div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_aeaeea935aeae653978b411b673a7dddd"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#aeaeea935aeae653978b411b673a7dddd">NRE::Math::Vector3D::operator-</a></div><div class="ttdeci">constexpr Vector3D operator-() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php">NRE::Math::Vector2D</a></div><div class="ttdoc">A cartesian 2D vector. </div><div class="ttdef"><b>Definition:</b> NRE_Matrix3x3.hpp:32</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_aa7a795b5f077419528494432e0e6f2ed"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#aa7a795b5f077419528494432e0e6f2ed">NRE::Math::Vector3D::operator&gt;</a></div><div class="ttdeci">constexpr bool operator&gt;(Vector3D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a7fc5f7838bc0a950fa32fcc3c8a2370f"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a7fc5f7838bc0a950fa32fcc3c8a2370f">NRE::Math::Vector3D::operator^</a></div><div class="ttdeci">constexpr Vector3D&lt; std::common_type_t&lt; T, K &gt; &gt; operator^(Vector3D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a99ac58cea6e9a107577c8e488e2a6924"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a99ac58cea6e9a107577c8e488e2a6924">NRE::Math::Vector3D::operator!=</a></div><div class="ttdeci">constexpr bool operator!=(Vector3D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ae2b0e961bc8147c9a12f415c9efbcb94"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae2b0e961bc8147c9a12f415c9efbcb94">NRE::Math::Vector3D::getG</a></div><div class="ttdeci">constexpr T getG() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a868798c0d24687e868f6d1e8aa220b1d"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a868798c0d24687e868f6d1e8aa220b1d">NRE::Math::Vector3D::setX</a></div><div class="ttdeci">constexpr void setX(K nX)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:151</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a0c588c999b3c31894ae504d3de036d58"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a0c588c999b3c31894ae504d3de036d58">NRE::Math::Vector3D::operator+=</a></div><div class="ttdeci">constexpr Vector3D &amp; operator+=(K k)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:340</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_af44751ca7404fc3bd378399d6099dc02"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#af44751ca7404fc3bd378399d6099dc02">NRE::Math::Vector3D::setR</a></div><div class="ttdeci">constexpr void setR(K r)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:175</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_af5a18d96daff9c1c954e0d2cb21257d2"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#af5a18d96daff9c1c954e0d2cb21257d2">NRE::Math::Vector3D::operator*=</a></div><div class="ttdeci">constexpr Vector3D &amp; operator*=(K k)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:378</div></div>
<div class="ttc" id="classhash_php"><div class="ttname"><a href="classhash.php">hash</a></div><div class="ttdoc">Manage hashing for specialized version. </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_aff90194d75579e485e2dd4d66106f506"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#aff90194d75579e485e2dd4d66106f506">NRE::Math::Vector3D::getY</a></div><div class="ttdeci">constexpr T getY() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a35a304d5edbc0f7dfa2efbda3d8a692b"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a35a304d5edbc0f7dfa2efbda3d8a692b">NRE::Math::Vector3D::pow</a></div><div class="ttdeci">Vector3D &amp; pow(K p)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:271</div></div>
<div class="ttc" id="namespace_math_php"><div class="ttname"><a href="namespace_math.php">Math</a></div><div class="ttdoc">Math&amp;#39;s API. </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ac21edc42172ee1d52d282f1f3d6b7bbe"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac21edc42172ee1d52d282f1f3d6b7bbe">NRE::Math::Vector3D::operator=</a></div><div class="ttdeci">constexpr Vector3D &amp; operator=(Vector3D const &amp;u)=default</div></div>
<div class="ttc" id="classcommon__type_php"><div class="ttname"><a href="classcommon__type.php">common_type</a></div><div class="ttdoc">Manage common_type test. </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a1b14d863cd2a9bf67610c00a70e4e06d"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a1b14d863cd2a9bf67610c00a70e4e06d">NRE::Math::Vector3D::operator/</a></div><div class="ttdeci">constexpr Vector3D&lt; std::common_type_t&lt; T, K &gt; &gt; operator/(K k) const </div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:485</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ad76f1ad788cb5325f750840a90f34d76"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ad76f1ad788cb5325f750840a90f34d76">NRE::Math::Vector3D::operator[]</a></div><div class="ttdeci">constexpr T &amp; operator[](std::size_t index)</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a107185429f2da5e17c366214a0625099"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a107185429f2da5e17c366214a0625099">NRE::Math::Vector3D::Vector3D</a></div><div class="ttdeci">constexpr Vector3D(K value)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:63</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a45e413f62b799ee6aefed553e7f59802"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a45e413f62b799ee6aefed553e7f59802">NRE::Math::Vector3D::operator&gt;=</a></div><div class="ttdeci">constexpr bool operator&gt;=(Vector3D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="namespacestd_php"><div class="ttname"><a href="namespacestd.php">std</a></div><div class="ttdoc">The stl standard namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a55c5e2d792fa7364ab98dfb6f7d7ce11"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a55c5e2d792fa7364ab98dfb6f7d7ce11">NRE::Math::Vector3D::toString</a></div><div class="ttdeci">Utility::String toString() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php">NRE::Math::Vector3D</a></div><div class="ttdoc">A cartesian 3D vector, 2D homogeneous. </div><div class="ttdef"><b>Definition:</b> NRE_Matrix3x3.hpp:33</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a43574553388ccd5d39bb216dfcb704fb"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a43574553388ccd5d39bb216dfcb704fb">NRE::Math::Vector3D::operator|=</a></div><div class="ttdeci">constexpr std::common_type_t&lt; T, K &gt; operator|=(Vector3D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ae0ee7c58b164322c8010065492ec724d"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae0ee7c58b164322c8010065492ec724d">NRE::Math::Vector3D::setY</a></div><div class="ttdeci">constexpr void setY(K nY)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:159</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_aae907186694f911c888e2c5d20ef51c5"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#aae907186694f911c888e2c5d20ef51c5">NRE::Math::Vector3D::~Vector3D</a></div><div class="ttdeci">~Vector3D()=default</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a73c4e134df19d879347b655a0a271c82"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a73c4e134df19d879347b655a0a271c82">NRE::Math::Vector3D::setB</a></div><div class="ttdeci">constexpr void setB(K b)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:191</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a963aff18cce45fd0a62513c1c7075a99"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a963aff18cce45fd0a62513c1c7075a99">NRE::Math::Vector3D::distanceSquared</a></div><div class="ttdeci">constexpr std::common_type_t&lt; T, K &gt; distanceSquared(Vector3D&lt; K &gt; const &amp;v) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ab47f9b48d3b91afd6bb0b481dc54f36b"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ab47f9b48d3b91afd6bb0b481dc54f36b">NRE::Math::Vector3D::getR</a></div><div class="ttdeci">constexpr T getR() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a36ef34aa4181dac6694927a97529573f"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a36ef34aa4181dac6694927a97529573f">NRE::Math::Vector3D::setCoord</a></div><div class="ttdeci">constexpr void setCoord(Vector2D&lt; K &gt; const &amp;u, L nZ)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:212</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a559830e269cf5f86440bf964d8fa7646"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a559830e269cf5f86440bf964d8fa7646">NRE::Math::Vector3D::setG</a></div><div class="ttdeci">constexpr void setG(K g)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:183</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ae5bbc25888de859dd937a9ae6ac41f2c"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae5bbc25888de859dd937a9ae6ac41f2c">NRE::Math::Vector3D::operator==</a></div><div class="ttdeci">constexpr bool operator==(Vector3D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ae4d3f94ce9af59718e47e436818b3274"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ae4d3f94ce9af59718e47e436818b3274">NRE::Math::Vector3D::value</a></div><div class="ttdeci">constexpr const T * value() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a5feca9230bad1d8a8004abcb161e9ac9"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a5feca9230bad1d8a8004abcb161e9ac9">NRE::Math::Vector3D::getB</a></div><div class="ttdeci">constexpr T getB() const </div></div>
<div class="ttc" id="classstd_1_1hash_3_01_n_r_e_1_1_math_1_1_vector3_d_3_01float_01_4_01_4_php_a215f5b8549164ea981879fd1b0c0e2e3"><div class="ttname"><a href="classstd_1_1hash_3_01_n_r_e_1_1_math_1_1_vector3_d_3_01float_01_4_01_4.php#a215f5b8549164ea981879fd1b0c0e2e3">std::hash&lt; NRE::Math::Vector3D&lt; float &gt; &gt;::operator()</a></div><div class="ttdeci">size_t operator()(NRE::Math::Vector3D&lt; float &gt; const &amp;p) const </div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:638</div></div>
<div class="ttc" id="namespace_n_r_e_php"><div class="ttname"><a href="namespace_n_r_e.php">NRE</a></div><div class="ttdoc">The NearlyRealEngine&amp;#39;s global namespace. </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a911ad22261fdd1446695c2e5ea3002c4"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a911ad22261fdd1446695c2e5ea3002c4">NRE::Math::Vector3D::norm</a></div><div class="ttdeci">long double norm() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a0fe3d36bfc1fc6a84d5d1d54d94ba291"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a0fe3d36bfc1fc6a84d5d1d54d94ba291">NRE::Math::Vector3D::getZ</a></div><div class="ttdeci">constexpr T getZ() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector4_d_php"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector4_d.php">NRE::Math::Vector4D</a></div><div class="ttdoc">A cartesian 4D vector, 3D homogeneous. </div><div class="ttdef"><b>Definition:</b> NRE_Matrix4x4.hpp:34</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a371d575b095e31b96a8f6109dd7f99fd"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a371d575b095e31b96a8f6109dd7f99fd">NRE::Math::Vector3D::Vector3D</a></div><div class="ttdeci">constexpr Vector3D()=default</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a2e7434c59ba36ba1557db4a8acb511fa"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2e7434c59ba36ba1557db4a8acb511fa">NRE::Math::Vector3D::operator+</a></div><div class="ttdeci">constexpr Vector3D&lt; std::common_type_t&lt; T, K &gt; &gt; operator+(K k) const </div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:432</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_a3a2394b397491fcd9493a1108f30109c"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#a3a2394b397491fcd9493a1108f30109c">NRE::Math::Vector2D::getX</a></div><div class="ttdeci">constexpr T getX() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a8e5b7118ce32aee7c861c12dd89d1b2a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a8e5b7118ce32aee7c861c12dd89d1b2a">NRE::Math::Vector3D::operator|</a></div><div class="ttdeci">constexpr std::common_type_t&lt; T, K &gt; operator|(Vector3D&lt; K &gt; const &amp;u) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ad047951c6b0dd5fafaeb002d12572187"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ad047951c6b0dd5fafaeb002d12572187">NRE::Math::Vector3D::setCoord</a></div><div class="ttdeci">constexpr void setCoord(K nX, L nY, N nZ)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:201</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_ac9fe609c2abdac54ac5f0e31d6fd6f92"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#ac9fe609c2abdac54ac5f0e31d6fd6f92">NRE::Math::Vector3D::normalize</a></div><div class="ttdeci">Vector3D &amp; normalize()</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a619848cfd51e30ff1a48aa77dbe5866f"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a619848cfd51e30ff1a48aa77dbe5866f">NRE::Math::Vector3D::normSquared</a></div><div class="ttdeci">constexpr T normSquared() const </div></div>
<div class="ttc" id="_n_r_e___vector2_d_8hpp_php_a94f06e0023c567d982fc8e4238366987"><div class="ttname"><a href="_n_r_e___vector2_d_8hpp.php#a94f06e0023c567d982fc8e4238366987">NRE::Math::reflect</a></div><div class="ttdeci">constexpr Vector2D&lt; std::common_type_t&lt; T, K &gt; &gt; reflect(Vector2D&lt; T &gt; const &amp;u, Vector2D&lt; K &gt; const &amp;n)</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a02ec733167058ab72a7806a5af743086"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a02ec733167058ab72a7806a5af743086">NRE::Math::Vector3D::operator/=</a></div><div class="ttdeci">constexpr Vector3D &amp; operator/=(K k)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:397</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a11a81a1b25edb47197c1156df184b9f6"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a11a81a1b25edb47197c1156df184b9f6">NRE::Math::Vector3D::Vector3D</a></div><div class="ttdeci">constexpr Vector3D(Vector2D&lt; K &gt; const &amp;u, L nZ)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:110</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a52ce9e19c29c901cdeb1979fad1782c3"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a52ce9e19c29c901cdeb1979fad1782c3">NRE::Math::Vector3D::distance</a></div><div class="ttdeci">long double distance(Vector3D&lt; K &gt; const &amp;v) const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a786677d4789865f8460951e43f57b594"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a786677d4789865f8460951e43f57b594">NRE::Math::Vector3D::Vector3D</a></div><div class="ttdeci">constexpr Vector3D(K nX, L nY, N nZ)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:56</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a10b1cab637eb39d3155a3a3f2a44fb0a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a10b1cab637eb39d3155a3a3f2a44fb0a">NRE::Math::Vector3D::setRGB</a></div><div class="ttdeci">constexpr void setRGB(K r, L g, N b)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:224</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a6f38989cfecc5987fdda4126ecdc17e2"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a6f38989cfecc5987fdda4126ecdc17e2">NRE::Math::Vector3D::getX</a></div><div class="ttdeci">constexpr T getX() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a187cfdc11d6e54b2b6cdd5befbe60b4a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a187cfdc11d6e54b2b6cdd5befbe60b4a">NRE::Math::Vector3D::setZ</a></div><div class="ttdeci">constexpr void setZ(K nZ)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:167</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a137334a06c6072edacb7eeebe620313a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a137334a06c6072edacb7eeebe620313a">NRE::Math::Vector3D::operator-=</a></div><div class="ttdeci">constexpr Vector3D &amp; operator-=(K k)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:359</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector2_d_php_acab4df35acef9a21408882db7b0dea7a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector2_d.php#acab4df35acef9a21408882db7b0dea7a">NRE::Math::Vector2D::getY</a></div><div class="ttdeci">constexpr T getY() const </div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a2f6687ed49bd761fdbf890918e61884a"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a2f6687ed49bd761fdbf890918e61884a">NRE::Math::Vector3D::operator*</a></div><div class="ttdeci">constexpr Vector3D&lt; std::common_type_t&lt; T, K &gt; &gt; operator*(K k) const </div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:469</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a01aed130e1ad18e18dacba460ad08c4e"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a01aed130e1ad18e18dacba460ad08c4e">NRE::Math::Vector3D::operator^=</a></div><div class="ttdeci">constexpr Vector3D &amp; operator^=(Vector3D&lt; K &gt; const &amp;u)</div></div>
<div class="ttc" id="class_n_r_e_1_1_math_1_1_vector3_d_php_a7d3138dd0c8a4c6f478f0f49c793a463"><div class="ttname"><a href="class_n_r_e_1_1_math_1_1_vector3_d.php#a7d3138dd0c8a4c6f478f0f49c793a463">NRE::Math::Vector3D::limit</a></div><div class="ttdeci">void limit(K max)</div><div class="ttdef"><b>Definition:</b> NRE_Vector3D.hpp:259</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- HTML footer for doxygen 1.8.8-->
<!-- start footer part -->
</div>
</div>
</div>
</div>
</body>
</html>
